<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CrunchyDough\bin\Release\CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrunchyDough" #>
<#@ output extension=".cs" #>
<#
int max_number_parameters = 10;
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using CrunchyDough;

namespace CrunchySalt
{
	static public class StringExtensions_Inject_Explicit
	{
	<#for(int number_parameters = 1; number_parameters <= max_number_parameters; number_parameters++){#>
		<#
		string operation_type = "Operation" + TTCS.ArgumentsForGeneric("object", number_parameters, "string");
		string cache_name = "INJECT_EXPLICIT" + number_parameters;
		#>

		static private readonly OperationCache<<#=operation_type#>, string> <#=cache_name#> = TextParsingCache.Get().NewOperationCache("<#=cache_name#>", delegate(string format) {
			return typeof(string).CreateDynamicMethodDelegate<<#=operation_type#>>("FormatString", delegate(MethodBase method) {
				return new ILReturn(
					new ILStringExpression(format, s => method.GetTechnicalILParameter(s.ParseInt()))
				);
            });
        });
		static public string Inject(this string item, <#=TTCS.Parameters("object", "arg#", number_parameters)#>)
        {
            return <#=cache_name#>.Fetch(item)(<#=TTCS.Arguments("arg#", number_parameters)#>);
        }
	<#}#>
	}
}