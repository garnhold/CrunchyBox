<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CrunchyDough\bin\Release\CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrunchyDough" #>
<#@ output extension=".cs" #>
<#
int max_number_parameters = 10;
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using CrunchyDough;

namespace CrunchySalt
{
	static public class TypeExtensions_ConstructorInfo
	{
		static private OperationCache<List<ConstructorInfoEX>, Type> GET_INSTANCE_CONSTRUCTORS = ReflectionCache.Get().NewOperationCache(delegate(Type item){
			return item.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
				.Convert(c => c.GetConstructorInfoEX())
				.ToList();
		});
		static public IEnumerable<ConstructorInfoEX> GetInstanceConstructors(this Type item)
		{
			return GET_INSTANCE_CONSTRUCTORS.Fetch(item);
		}

		static private OperationCache<ConstructorInfoEX, Type, ContentsEnumerable<Type>> GET_INSTANCE_CONSTRUCTOR = ReflectionCache.Get().NewOperationCache(delegate(Type item, ContentsEnumerable<Type> parameter_types){
			return item.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, parameter_types.ToArray(), null)
				.GetConstructorInfoEX();
		});
		static public ConstructorInfoEX GetInstanceConstructor(this Type item, IEnumerable<Type> parameter_types)
		{
			return GET_INSTANCE_CONSTRUCTOR.Fetch(item, new ContentsEnumerable<Type>(parameter_types));
		}

		<#for(int i = 0; i < max_number_parameters; i++){#>

			static public ConstructorInfoEX GetInstanceConstructor<#=TTCS.ArgumentsForGeneric("P#", i)#>(this Type item)
			{
				return item.GetInstanceConstructor(new Type[]{<#=TTCS.Arguments("typeof(P#)", i)#>});
			}
		<#}#>
	}
}