<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CrunchyDough\bin\Release\CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrunchyDough" #>
<#@ output extension=".cs" #>
<#
Style[] styles = new Style[]{
	new Style("Member", "BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly"),
	new Style("Instance", "BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly"),
	new Style("Static", "BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.DeclaredOnly")
};
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using CrunchyDough;

namespace CrunchySalt
{
	static public class TypeExtensions_FieldInfo
	{
	<#foreach(Style style in styles){#>

		static private OperationCache<List<FieldInfoEX>, Type> GET_IMMEDIATE_<#=style.name#>_FIELDS = ReflectionCache.Get().NewOperationCache(delegate(Type item){
			return item.GetFields(<#=style.binding_flags#>)
				.Convert(f => f.GetFieldInfoEX())
				.ToList();
		});
		static public IEnumerable<FieldInfoEX> GetImmediate<#=style.name#>Fields(this Type item)
		{
			return GET_IMMEDIATE_<#=style.name#>_FIELDS.Fetch(item);
		}

		static private OperationCache<List<FieldInfoEX>, Type> GET_<#=style.name#>_FIELDS = ReflectionCache.Get().NewOperationCache(delegate(Type item){
			return item.GetTypeAndAllBaseTypes()
				.Convert(f => f.GetImmediate<#=style.name#>Fields())
				.ToList();
		});
		static public IEnumerable<FieldInfoEX> Get<#=style.name#>Fields(this Type item)
		{
			return GET_<#=style.name#>_FIELDS.Fetch(item);
		}

		static private OperationCache<FieldInfoEX, Type, string> GET_IMMEDIATE_<#=style.name#>_FIELD = ReflectionCache.Get().NewOperationCache(delegate(Type item, string name){
			return item.GetField(name, <#=style.binding_flags#>)
				.GetFieldInfoEX();
		});
		static public FieldInfoEX GetImmediate<#=style.name#>Field(this Type item, string name)
		{
			return GET_IMMEDIATE_<#=style.name#>_FIELD.Fetch(item, name);
		}

		static private OperationCache<FieldInfoEX, Type, string> GET_<#=style.name#>_FIELD = ReflectionCache.Get().NewOperationCache(delegate(Type item, string name){
			return item.GetTypeAndAllBaseTypes()
				.Convert(t => t.GetImmediate<#=style.name#>Field(name))
				.GetFirstNonNull();
		});
		static public FieldInfoEX Get<#=style.name#>Field(this Type item, string name)
		{
			return GET_<#=style.name#>_FIELD.Fetch(item, name);
		}
	<#}#>
	}
}
<#+
public class Style
{
	public readonly string name;
	public readonly string binding_flags;

	public Style(string n, string b)
	{
		name = n;
		binding_flags = b;
	}
}
#>