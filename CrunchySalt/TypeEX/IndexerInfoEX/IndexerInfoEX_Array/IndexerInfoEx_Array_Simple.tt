<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CrunchyDough\bin\Release\CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrunchyDough" #>
<#@ output extension=".cs" #>
<#
TypeInfo[] types = new TypeInfo[]{
	new TypeInfo("byte", "Byte", "I1"),
	new TypeInfo("short", "Short", "I2"),
	new TypeInfo("int", "Int", "I4"),
	new TypeInfo("long", "Long", "I8"),

	new TypeInfo("float", "Float", "R4"),
	new TypeInfo("double", "Double", "R8")
};
#>

using System;
using System.Collections;
using System.Collections.Generic;

using System.Reflection;
using System.Reflection.Emit;

using CrunchyDough;

namespace CrunchySalt
{
<#foreach(TypeInfo type in types){#>

    public class IndexerInfoEX_Array_<#=type.class_name#> : IndexerInfoEX_Array
    {
		static public readonly IndexerInfoEX_Array_<#=type.class_name#> INSTANCE = new IndexerInfoEX_Array_<#=type.class_name#>();

        private IndexerInfoEX_Array_<#=type.class_name#>() : base(typeof(<#=type.type_name#>)) { }

        public override void RenderIL_Load(ILCanvas canvas, ILValue target, ILValue index)
        {
            target.RenderIL_Load(canvas);
            index.RenderIL_Load(canvas);

            canvas.Emit_Ldelem_<#=type.op_code_suffix#>();
        }

        public override void RenderIL_Store(ILCanvas canvas, ILValue target, ILValue index, ILValue value)
        {
            target.RenderIL_Load(canvas);
            index.RenderIL_Load(canvas);

            value.RenderIL_Load(canvas);

            canvas.Emit_Stelem_<#=type.op_code_suffix#>();
        }
    }
<#}#>
}

<#+
class TypeInfo
{
	public readonly string type_name;
	public readonly string class_name;

	public readonly string op_code_suffix;

	public TypeInfo(string t, string c, string o)
	{
		type_name = t;
		class_name = c;

		op_code_suffix = o;
	}
}

#>