<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/CrunchyDough/bin/Release/CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Crunchy.Dough" #>
<#@ output extension=".cs" #>
<#

List<OperatorTypeInfo> operator_type_infos = new List<OperatorTypeInfo>();

OperatorTypeInfo numeric_negate_operator = operator_type_infos.AddAndGet(new OperatorTypeInfo("NumericNegate", "-", "op_UnaryNegation"));
OperatorTypeInfo logical_negate_operator = operator_type_infos.AddAndGet(new OperatorTypeInfo("LogicalNegate", "!", "op_LogicalUnaryNegation"));
OperatorTypeInfo ones_complement_operator = operator_type_infos.AddAndGet(new OperatorTypeInfo("OnesComplement", "~", "op_OnesComplement"));

TypeOperatorInfo[] type_operator_infos = new TypeOperatorInfo[]{
	new TypeOperatorInfo("Bool", true, "item.IsBool()",
		new OperatorInfo_AutoLoad(logical_negate_operator, "typeof(bool)", "canvas.Emit_LNot();")
	),

	new TypeOperatorInfo("Integer", true, "item.IsInteger()",
		new OperatorInfo_AutoLoad(ones_complement_operator, "i", "canvas.Emit_Not();")
	),

	new TypeOperatorInfo("Numeric", true, "item.IsNumeric()",
		new OperatorInfo_AutoLoad(numeric_negate_operator, "i", "canvas.Emit_Neg();")
	)
};

#>
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace Crunchy.Salt
{
    using Dough;
    using Salt;
    
    public enum UnaryOperatorType
	{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
		<#=info.name#>,
<#}#>
	}

	static public class UnaryOperatorTypeExtensions
	{
		static public string GetSymbol(this UnaryOperatorType item)
		{
			switch(item)
			{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
				case UnaryOperatorType.<#=info.name#>: return "<#=info.symbol#>";
<#}#>
			}

			throw new UnaccountedBranchException("item", item);
		}

		static public string GetSpecialName(this UnaryOperatorType item)
		{
			switch(item)
			{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
				case UnaryOperatorType.<#=info.name#>: return "<#=info.special_name#>";
<#}#>
			}

			throw new UnaccountedBranchException("item", item);
		}

		static public UnaryOperatorType GetUnaryOperatorTypeBySymbol(string symbol)
		{
			switch(symbol)
			{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
				case "<#=info.symbol#>": return UnaryOperatorType.<#=info.name#>;
<#}#>
			}

			throw new UnaccountedBranchException("symbol", symbol);
		}

		static public UnaryOperatorType GetUnaryOperatorTypeByName(string name)
		{
			switch(name)
			{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
				case "<#=info.name#>": return UnaryOperatorType.<#=info.name#>;
<#}#>
			}

			throw new UnaccountedBranchException("name", name);
		}
	}

	static public class TypeExtensions_UnaryOperatorInfo
	{
		static public UnaryOperatorInfoEX GetUnaryOperator(this Type item, UnaryOperatorType operator_type)
		{
			switch(operator_type)
			{
<#foreach(OperatorTypeInfo info in operator_type_infos){#>
				case UnaryOperatorType.<#=info.name#>: return item.Get<#=info.name#>UnaryOperator();
<#}#>				
			}

			throw new UnaccountedBranchException("operator_type", operator_type);
		}

		static public UnaryOperatorInfoEX GetUnaryOperatorByName(this Type item, string name)
		{
			return item.GetUnaryOperator(UnaryOperatorTypeExtensions.GetUnaryOperatorTypeByName(name));
		}

		static public UnaryOperatorInfoEX GetUnaryOperatorBySymbol(this Type item, string symbol)
		{
			return item.GetUnaryOperator(UnaryOperatorTypeExtensions.GetUnaryOperatorTypeBySymbol(symbol));
		}

		static private OperationCache<UnaryOperatorInfoEX, Type, UnaryOperatorType> GET_OVERLOADED_OPERATOR = ReflectionCache.Get().NewOperationCache("GET_OVERLOADED_OPERATOR", delegate(Type item, UnaryOperatorType operator_type) {
			string special_name = operator_type.GetSpecialName();
			Type[] parameter_types = new Type[] { item };

			return item.GetStaticMethod(special_name, parameter_types)
				.IfNotNull(m => (UnaryOperatorInfoEX)new UnaryOperatorInfoEX_Method(operator_type, m));
		});
		static public UnaryOperatorInfoEX GetOverloadedUnaryOperator(this Type item, UnaryOperatorType operator_type)
		{
			return GET_OVERLOADED_OPERATOR.Fetch(item, operator_type);
		}

<#foreach(OperatorTypeInfo info in operator_type_infos){#>
		static private OperationCache<UnaryOperatorInfoEX, Type> GET_<#=info.name#>_OPERATOR = ReflectionCache.Get().NewOperationCache("GET_<#=info.name#>_OPERATOR", delegate(Type item) {
	<#foreach(TypeOperatorInfo type_operator_info in type_operator_infos.Narrow(t => t.is_pre_override).Narrow(t => t.infos.Has(o => o.type_info == info))){#>

			if(<#=type_operator_info.condition_code#>)
				return new UnaryOperatorInfoEX_Internal_<#=type_operator_info.name#>_<#=info.name#>(item);
	<#}#>

			UnaryOperatorInfoEX overloaded_operator = item.GetOverloadedUnaryOperator(UnaryOperatorType.<#=info.name#>);
			if(overloaded_operator != null)
				return overloaded_operator;
	<#foreach(TypeOperatorInfo type_operator_info in type_operator_infos.Narrow(t => t.is_pre_override == false).Narrow(t => t.infos.Has(o => o.type_info == info))){#>

			if(<#=type_operator_info.condition_code#>)
				return new UnaryOperatorInfoEX_Internal_<#=type_operator_info.name#>_<#=info.name#>(item);
	<#}#>

			throw new InvalidOperationException("No unary operator exists for the type " + item + ".");
		});
		static public UnaryOperatorInfoEX Get<#=info.name#>UnaryOperator(this Type item)
		{
			return GET_<#=info.name#>_OPERATOR.Fetch(item);
		}

<#}#>
	}

<#foreach(TypeOperatorInfo type_info in type_operator_infos){#>

<#foreach(OperatorInfo info in type_info.infos){#>
	public class UnaryOperatorInfoEX_Internal_<#=type_info.name#>_<#=info.type_info.name#> : UnaryOperatorInfoEX_Internal
	{
		public UnaryOperatorInfoEX_Internal_<#=type_info.name#>_<#=info.type_info.name#>(Type i) : base(UnaryOperatorType.<#=info.type_info.name#>, i, <#=info.output_type#>) { }

		public override void RenderIL_Operate(ILCanvas canvas, ILValue input)
		{
			<#=info.il_load_code#>
		}
	}
<#}#>
<#}#>
}

<#+
class TypeOperatorInfo
{
	public readonly string name;

	public readonly bool is_pre_override;

	public readonly string condition_code;
	public readonly OperatorInfo[] infos;

	public TypeOperatorInfo(string n, bool ipo, string c, params OperatorInfo[] i)
	{
		name = n;

		is_pre_override = ipo;

		condition_code = c;
		infos = i;
	}
}

class OperatorInfo
{
	public readonly OperatorTypeInfo type_info;

	public readonly string output_type;

	public readonly string il_load_code;

	public OperatorInfo(OperatorTypeInfo t, string ot, string ilc)
	{
		type_info = t;

		output_type = ot;

		il_load_code = ilc;
	}
}
class OperatorInfo_AutoLoad : OperatorInfo
{
	public OperatorInfo_AutoLoad(OperatorTypeInfo t, string ot, string ilc) : base(t, ot, "LoadValue(canvas, input); " + ilc) { }
}

class OperatorTypeInfo
{
	public readonly string name;

	public readonly string symbol;
	public readonly string special_name;

	public OperatorTypeInfo(string n, string s, string sn)
	{
		name = n;

		symbol = s;
		special_name = sn;
	}
}
#>