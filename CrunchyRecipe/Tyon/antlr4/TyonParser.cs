//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Garrett/Documents/Visual Studio 2013/Projects/CrunchyBox/CrunchyRecipe/Tyon/TyonGrammar\Tyon.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class TyonParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, NUMBER=15, STRING=16, 
		ID=17, WHITESPACE=18;
	public const int
		RULE_tyonType = 0, RULE_tyonObject = 1, RULE_tyonSurrogate = 2, RULE_tyonArray = 3, 
		RULE_tyonValue = 4, RULE_tyonAddress = 5, RULE_tyonVariable = 6;
	public static readonly string[] ruleNames = {
		"tyonType", "tyonObject", "tyonSurrogate", "tyonArray", "tyonValue", "tyonAddress", 
		"tyonVariable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "','", "'>'", "'('", "'&'", "')'", "'{'", "'}'", "'['", "']'", 
		"'null'", "'@'", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "NUMBER", "STRING", "ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tyon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TyonParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TyonTypeContext : ParserRuleContext {
		public TyonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonType; } }
	 
		public TyonTypeContext() { }
		public virtual void CopyFrom(TyonTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TyonType_NormalContext : TyonTypeContext {
		public ITerminalNode ID() { return GetToken(TyonParser.ID, 0); }
		public TyonType_NormalContext(TyonTypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonType_Normal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonType_TemplatedContext : TyonTypeContext {
		public ITerminalNode ID() { return GetToken(TyonParser.ID, 0); }
		public TyonTypeContext[] tyonType() {
			return GetRuleContexts<TyonTypeContext>();
		}
		public TyonTypeContext tyonType(int i) {
			return GetRuleContext<TyonTypeContext>(i);
		}
		public TyonType_TemplatedContext(TyonTypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonType_Templated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonTypeContext tyonType() {
		TyonTypeContext _localctx = new TyonTypeContext(Context, State);
		EnterRule(_localctx, 0, RULE_tyonType);
		int _la;
		try {
			State = 27;
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new TyonType_NormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; Match(ID);
				}
				break;
			case 2:
				_localctx = new TyonType_TemplatedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 15; Match(ID);
				State = 16; Match(T__0);
				State = 17; tyonType();
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__1) {
					{
					{
					State = 18; Match(T__1);
					State = 19; tyonType();
					}
					}
					State = 24;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 25; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonObjectContext : ParserRuleContext {
		public TyonTypeContext tyonType() {
			return GetRuleContext<TyonTypeContext>(0);
		}
		public TyonAddressContext tyonAddress() {
			return GetRuleContext<TyonAddressContext>(0);
		}
		public TyonVariableContext[] tyonVariable() {
			return GetRuleContexts<TyonVariableContext>();
		}
		public TyonVariableContext tyonVariable(int i) {
			return GetRuleContext<TyonVariableContext>(i);
		}
		public TyonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonObjectContext tyonObject() {
		TyonObjectContext _localctx = new TyonObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_tyonObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; tyonType();
			State = 35;
			_la = TokenStream.La(1);
			if (_la==T__3) {
				{
				State = 30; Match(T__3);
				State = 31; Match(T__4);
				State = 32; tyonAddress();
				State = 33; Match(T__5);
				}
			}

			State = 45;
			_la = TokenStream.La(1);
			if (_la==T__6) {
				{
				State = 37; Match(T__6);
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ID) {
					{
					{
					State = 38; tyonVariable();
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 44; Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonSurrogateContext : ParserRuleContext {
		public TyonTypeContext tyonType() {
			return GetRuleContext<TyonTypeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(TyonParser.STRING, 0); }
		public TyonAddressContext tyonAddress() {
			return GetRuleContext<TyonAddressContext>(0);
		}
		public TyonSurrogateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonSurrogate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonSurrogate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonSurrogateContext tyonSurrogate() {
		TyonSurrogateContext _localctx = new TyonSurrogateContext(Context, State);
		EnterRule(_localctx, 4, RULE_tyonSurrogate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; tyonType();
			State = 53;
			_la = TokenStream.La(1);
			if (_la==T__3) {
				{
				State = 48; Match(T__3);
				State = 49; Match(T__4);
				State = 50; tyonAddress();
				State = 51; Match(T__5);
				}
			}

			State = 55; Match(T__6);
			State = 56; Match(STRING);
			State = 57; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonArrayContext : ParserRuleContext {
		public TyonTypeContext tyonType() {
			return GetRuleContext<TyonTypeContext>(0);
		}
		public TyonValueContext[] tyonValue() {
			return GetRuleContexts<TyonValueContext>();
		}
		public TyonValueContext tyonValue(int i) {
			return GetRuleContext<TyonValueContext>(i);
		}
		public TyonArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonArray; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonArrayContext tyonArray() {
		TyonArrayContext _localctx = new TyonArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_tyonArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; tyonType();
			State = 60; Match(T__8);
			State = 69;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__10) | (1L << T__11) | (1L << NUMBER) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				State = 61; tyonValue();
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__1) {
					{
					{
					State = 62; Match(T__1);
					State = 63; tyonValue();
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 71; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonValueContext : ParserRuleContext {
		public TyonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonValue; } }
	 
		public TyonValueContext() { }
		public virtual void CopyFrom(TyonValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TyonValue_InternalAddressContext : TyonValueContext {
		public TyonAddressContext tyonAddress() {
			return GetRuleContext<TyonAddressContext>(0);
		}
		public TyonValue_InternalAddressContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_InternalAddress(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_ExternalAddressContext : TyonValueContext {
		public TyonAddressContext tyonAddress() {
			return GetRuleContext<TyonAddressContext>(0);
		}
		public TyonValue_ExternalAddressContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_ExternalAddress(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_SurrogateContext : TyonValueContext {
		public TyonSurrogateContext tyonSurrogate() {
			return GetRuleContext<TyonSurrogateContext>(0);
		}
		public TyonValue_SurrogateContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_Surrogate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_ArrayContext : TyonValueContext {
		public TyonArrayContext tyonArray() {
			return GetRuleContext<TyonArrayContext>(0);
		}
		public TyonValue_ArrayContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_Array(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_ObjectContext : TyonValueContext {
		public TyonObjectContext tyonObject() {
			return GetRuleContext<TyonObjectContext>(0);
		}
		public TyonValue_ObjectContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_Object(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_NumberContext : TyonValueContext {
		public ITerminalNode NUMBER() { return GetToken(TyonParser.NUMBER, 0); }
		public TyonValue_NumberContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_Number(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_NullContext : TyonValueContext {
		public TyonValue_NullContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_Null(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonValue_StringContext : TyonValueContext {
		public ITerminalNode STRING() { return GetToken(TyonParser.STRING, 0); }
		public TyonValue_StringContext(TyonValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonValue_String(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonValueContext tyonValue() {
		TyonValueContext _localctx = new TyonValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_tyonValue);
		try {
			State = 83;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new TyonValue_NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new TyonValue_StringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(STRING);
				}
				break;
			case 3:
				_localctx = new TyonValue_NullContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; Match(T__10);
				}
				break;
			case 4:
				_localctx = new TyonValue_InternalAddressContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; Match(T__4);
				State = 77; tyonAddress();
				}
				break;
			case 5:
				_localctx = new TyonValue_ExternalAddressContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 78; Match(T__11);
				State = 79; tyonAddress();
				}
				break;
			case 6:
				_localctx = new TyonValue_ObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 80; tyonObject();
				}
				break;
			case 7:
				_localctx = new TyonValue_SurrogateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 81; tyonSurrogate();
				}
				break;
			case 8:
				_localctx = new TyonValue_ArrayContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 82; tyonArray();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonAddressContext : ParserRuleContext {
		public TyonAddressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonAddress; } }
	 
		public TyonAddressContext() { }
		public virtual void CopyFrom(TyonAddressContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TyonAddress_ObjectContext : TyonAddressContext {
		public TyonObjectContext tyonObject() {
			return GetRuleContext<TyonObjectContext>(0);
		}
		public TyonAddress_ObjectContext(TyonAddressContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonAddress_Object(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonAddress_IdentifierContext : TyonAddressContext {
		public ITerminalNode ID() { return GetToken(TyonParser.ID, 0); }
		public TyonAddress_IdentifierContext(TyonAddressContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonAddress_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonAddress_IntContext : TyonAddressContext {
		public ITerminalNode NUMBER() { return GetToken(TyonParser.NUMBER, 0); }
		public TyonAddress_IntContext(TyonAddressContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonAddress_Int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyonAddress_StringContext : TyonAddressContext {
		public ITerminalNode STRING() { return GetToken(TyonParser.STRING, 0); }
		public TyonAddress_StringContext(TyonAddressContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonAddress_String(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonAddressContext tyonAddress() {
		TyonAddressContext _localctx = new TyonAddressContext(Context, State);
		EnterRule(_localctx, 10, RULE_tyonAddress);
		try {
			State = 89;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new TyonAddress_IdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; Match(ID);
				}
				break;
			case 2:
				_localctx = new TyonAddress_IntContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; Match(NUMBER);
				}
				break;
			case 3:
				_localctx = new TyonAddress_StringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; Match(STRING);
				}
				break;
			case 4:
				_localctx = new TyonAddress_ObjectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88; tyonObject();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyonVariableContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TyonParser.ID, 0); }
		public TyonValueContext tyonValue() {
			return GetRuleContext<TyonValueContext>(0);
		}
		public TyonVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyonVariable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITyonVisitor<TResult> typedVisitor = visitor as ITyonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyonVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyonVariableContext tyonVariable() {
		TyonVariableContext _localctx = new TyonVariableContext(Context, State);
		EnterRule(_localctx, 12, RULE_tyonVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(ID);
			State = 92; Match(T__12);
			State = 93; tyonValue();
			State = 94; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x14\x63\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x17\n\x2\f\x2\xE\x2\x1A\v\x2\x3\x2"+
		"\x3\x2\x5\x2\x1E\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3&\n\x3"+
		"\x3\x3\x3\x3\a\x3*\n\x3\f\x3\xE\x3-\v\x3\x3\x3\x5\x3\x30\n\x3\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x38\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x43\n\x5\f\x5\xE\x5\x46\v\x5\x5\x5H\n"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6V\n\x6\x3\a\x3\a\x3\a\x3\a\x5\a\\\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x2\x2\t\x2\x4\x6\b\n\f\xE\x2\x2m\x2\x1D\x3\x2\x2\x2\x4\x1F"+
		"\x3\x2\x2\x2\x6\x31\x3\x2\x2\x2\b=\x3\x2\x2\x2\nU\x3\x2\x2\x2\f[\x3\x2"+
		"\x2\x2\xE]\x3\x2\x2\x2\x10\x1E\a\x13\x2\x2\x11\x12\a\x13\x2\x2\x12\x13"+
		"\a\x3\x2\x2\x13\x18\x5\x2\x2\x2\x14\x15\a\x4\x2\x2\x15\x17\x5\x2\x2\x2"+
		"\x16\x14\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x18\x19\x3"+
		"\x2\x2\x2\x19\x1B\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1B\x1C\a\x5\x2\x2\x1C"+
		"\x1E\x3\x2\x2\x2\x1D\x10\x3\x2\x2\x2\x1D\x11\x3\x2\x2\x2\x1E\x3\x3\x2"+
		"\x2\x2\x1F%\x5\x2\x2\x2 !\a\x6\x2\x2!\"\a\a\x2\x2\"#\x5\f\a\x2#$\a\b\x2"+
		"\x2$&\x3\x2\x2\x2% \x3\x2\x2\x2%&\x3\x2\x2\x2&/\x3\x2\x2\x2\'+\a\t\x2"+
		"\x2(*\x5\xE\b\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2"+
		"\x2,.\x3\x2\x2\x2-+\x3\x2\x2\x2.\x30\a\n\x2\x2/\'\x3\x2\x2\x2/\x30\x3"+
		"\x2\x2\x2\x30\x5\x3\x2\x2\x2\x31\x37\x5\x2\x2\x2\x32\x33\a\x6\x2\x2\x33"+
		"\x34\a\a\x2\x2\x34\x35\x5\f\a\x2\x35\x36\a\b\x2\x2\x36\x38\x3\x2\x2\x2"+
		"\x37\x32\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\a\t"+
		"\x2\x2:;\a\x12\x2\x2;<\a\n\x2\x2<\a\x3\x2\x2\x2=>\x5\x2\x2\x2>G\a\v\x2"+
		"\x2?\x44\x5\n\x6\x2@\x41\a\x4\x2\x2\x41\x43\x5\n\x6\x2\x42@\x3\x2\x2\x2"+
		"\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45H\x3\x2"+
		"\x2\x2\x46\x44\x3\x2\x2\x2G?\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2I"+
		"J\a\f\x2\x2J\t\x3\x2\x2\x2KV\a\x11\x2\x2LV\a\x12\x2\x2MV\a\r\x2\x2NO\a"+
		"\a\x2\x2OV\x5\f\a\x2PQ\a\xE\x2\x2QV\x5\f\a\x2RV\x5\x4\x3\x2SV\x5\x6\x4"+
		"\x2TV\x5\b\x5\x2UK\x3\x2\x2\x2UL\x3\x2\x2\x2UM\x3\x2\x2\x2UN\x3\x2\x2"+
		"\x2UP\x3\x2\x2\x2UR\x3\x2\x2\x2US\x3\x2\x2\x2UT\x3\x2\x2\x2V\v\x3\x2\x2"+
		"\x2W\\\a\x13\x2\x2X\\\a\x11\x2\x2Y\\\a\x12\x2\x2Z\\\x5\x4\x3\x2[W\x3\x2"+
		"\x2\x2[X\x3\x2\x2\x2[Y\x3\x2\x2\x2[Z\x3\x2\x2\x2\\\r\x3\x2\x2\x2]^\a\x13"+
		"\x2\x2^_\a\xF\x2\x2_`\x5\n\x6\x2`\x61\a\x10\x2\x2\x61\xF\x3\x2\x2\x2\f"+
		"\x18\x1D%+/\x37\x44GU[";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
