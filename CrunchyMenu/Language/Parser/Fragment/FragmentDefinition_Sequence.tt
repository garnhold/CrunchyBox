<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(SolutionDir)/bin/CrunchyDough.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Crunchy.Dough" #>
<#@ output extension=".cs" #>
<#
int max_number_fragments = 10;

#>
using System;
using System.Collections;
using System.Collections.Generic;

using Crunchy.Dough;

namespace Crunchy.Menu
{
<#      for(int number_fragments = 1; number_fragments <= max_number_fragments; number_fragments++){#>
<#
            string base_basic_class_name = "FragmentDefinition";
            string base_class_arguments = "<T>";
            string base_class_name = base_basic_class_name + base_class_arguments;
        
            string sub_class_name = base_basic_class_name + "_SubSequence";
        
            string basic_class_name = base_basic_class_name + "_Sequence";
            string class_arguments = TTCS.ArgumentsForGeneric("P#", number_fragments, "T");
            string class_name = basic_class_name + class_arguments;
        
            string operation_type = "Operation" + class_arguments;
        
            FragmentEntry[] fragments = Ints.Range(1, number_fragments, 1, true)
                .Convert(i => new FragmentEntry(i))
                .ToArray();
        
            string initialize_parameters = TTCS.Parameters(fragments.Convert(f => f.type_name), "f#", null, operation_type + " o");
            string initialize_arguments = TTCS.Arguments("f#", number_fragments, null, "o");
#>

            public class <#=class_name#> : <#=base_class_name#>
            {
                private List<<#=base_class_name#>> sub_sequences;
                
                protected override bool ConsumeInternal(IList<TokenInstance> tokens, int index, out int new_index, out Operation<T> producer)
                {
                    int best_index = -1;
                    Operation<T> best_producer = null;

                    foreach (<#=base_class_name#> sub_sequence in sub_sequences)
                    {
                        if (sub_sequence.Consume(tokens, index, out new_index, out producer))
                        {
                            if (new_index >= best_index)
                            {
                                best_index = new_index;
                                best_producer = producer;
                            }
                        }
                    }

                    if (best_index != -1)
                    {
                        new_index = best_index;
                        producer = best_producer;
                        return true;
                    }

                    new_index = -1;
                    producer = null;
                    return false;
                }

                public <#=basic_class_name#>(string n) : base(n)
                {
                    sub_sequences = new List<<#=base_class_name#>>();
                }
                
                public <#=basic_class_name#>(string n, <#=initialize_parameters#>) : this(n)
                {
                    Initialize(<#=initialize_arguments#>);
                }
                
                public void Initialize(<#=initialize_parameters#>)
                {
                    int count = 0;
                    sub_sequences.Clear();
                    
<#                  foreach(FragmentEntry fragment in fragments){#>
                        foreach(<#=fragment.type_name#> <#=fragment.iter_name#> in <#=fragment.parameter_name#>.GetSubAlternatives())
                        {
<#                  }#>

                            sub_sequences.Add(new <#=sub_class_name#>(<#=fragments.Convert(f => f.iter_name).Append("o").Join(", ")#>));

<#                  foreach(FragmentEntry fragment in fragments){#>
                        }
<#                  }#>
                }
                
                public override bool CanConsumeNone()
                {
                    if(sub_sequences.Has(s => s.CanConsumeNone()))
                        return true;
                        
                    return false;
                }
                
                public override string GetPsuedoRegEx()
                {
                    return sub_sequences.GetFirst().GetPsuedoRegEx();
                }
                
                private class <#=sub_class_name#> : <#=base_class_name#>
                {
                    private <#=operation_type#> producer_operation;            
        
<#                  foreach(FragmentEntry fragment in fragments){#>
                        private <#=fragment.type_name#> <#=fragment.variable_name#>;
<#                  }#>

                    protected override bool ConsumeInternal(IList<TokenInstance> tokens, int index, out int new_index, out Operation<T> producer)
                    {
                        new_index = index;
                        producer = null;
                        
<#                      for(int f = 1; f <= number_fragments; f++){#>
                            if(fragment<#=f#>.Consume(tokens, new_index, out new_index, out Operation<P<#=f#>> sub_producer<#=f#>) == false)
                                return false;                        
<#                      }#>
                        
                        producer = () => producer_operation(<#=TTCS.Arguments("sub_producer#()", number_fragments)#>);
                        return true;
                    }
                    
                    public <#=sub_class_name#>(<#=initialize_parameters#>) : base(null)
                    {
<#                      foreach(FragmentEntry fragment in fragments){#>
                            <#=fragment.variable_name#> = <#=fragment.parameter_name#>;
<#                      }#>
                
                        producer_operation = o;
                    }
                    
                    public override bool CanConsumeNone()
                    {
<#                      foreach(FragmentEntry fragment in fragments){#>
                            if(<#=fragment.variable_name#>.CanConsumeNone())
<#                      }#>
                                return true;
                                
                        return false;
                    }
                    
                    public override string GetPsuedoRegEx()
                    {
                        return "(" + <#=fragments.Convert(f => f.variable_name + ".GetPsuedoRegEx()").Join(" + ")#> + ")";
                    }
                }
            }
            static public partial class FragmentDefinitions
            {
                static public <#=base_class_name#> Sequence<#=class_arguments#>(string n, <#=initialize_parameters#>)
                {
                    return new <#=class_name#>(n, <#=initialize_arguments#>);
                }
                static public <#=base_class_name#> Sequence<#=class_arguments#>(<#=initialize_parameters#>)
                {
                    return Sequence(null, <#=initialize_arguments#>);
                }
            }
<#      }#>
}

<#+
class FragmentEntry
{
    public readonly string type_name;
    public readonly string variable_name;
    public readonly string parameter_name;
    public readonly string iter_name;
    
    public FragmentEntry(string t, string v, string p, string i)
    {
        type_name = t;
        variable_name = v;
        parameter_name = p;
        iter_name = i;
    }
    
    public FragmentEntry(int i) : this(
        "FragmentDefinition" + TTCS.ArgumentsForGeneric("P" + i, true),
        "fragment" + i,
        "f" + i,
        "i" + i
    )
    {
    }
}
#>