<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
TypeInfo[] types = new TypeInfo[]{
	new TypeInfo("bool", "Bool", "Toggle", "LINE_HEIGHT"),
	new TypeInfo("Color", "Color", "ColorField", "LINE_HEIGHT"),

	new TypeInfo("Bounds", "Bounds", "BoundsField", "LINE_HEIGHT * 3.0f"),
	new TypeInfo("Rect", "Rect", "RectField", "LINE_HEIGHT"),
	new TypeInfo("Vector2", "Vector2", "Vector2Field", "LINE_HEIGHT"),
	new TypeInfo("Vector3", "Vector3", "Vector3Field", "LINE_HEIGHT"),

	new TypeInfo("Enum", "Enum", "EnumPopup", "LINE_HEIGHT")
};
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEditor;

using CrunchyDough;
using CrunchyBun;
using CrunchySandwich;

namespace CrunchySandwichBag
{
<#foreach(TypeInfo type in types){#>
	[EditorGUIElementForType(typeof(<#=type.type_name#>), true)]
    public class EditorGUIElement_EditPropertySingleValue_BuiltIn_<#=type.class_name#> : EditorGUIElement_EditPropertySingleValue_BuiltIn<<#=type.type_name#>>
    {
        protected override <#=type.type_name#> DrawBuiltInInternal(Rect rect, GUIContent label, <#=type.type_name#> value)
        {
            return (<#=type.type_name#>)EditorGUI.<#=type.function_name#>(rect, label, value);
        }

		protected override float CalculateElementHeightInternal()
		{
			return <#=type.height#>;
		}

        public EditorGUIElement_EditPropertySingleValue_BuiltIn_<#=type.class_name#>(EditProperty_Single_Value p) : base(p) { }
    }

<#}#>
}

<#+
public class TypeInfo
{
	public readonly string type_name;
	public readonly string class_name;
	public readonly string function_name;

	public readonly string height;

	public TypeInfo(string t, string c, string f, string h)
	{
		type_name = t;
		class_name = c;
		function_name = f;

		height = h;
	}
}
#>