<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
TypeInfo[] types = new TypeInfo[]{
	new TypeInfo("IntRange", "int", "IntField", "DEFAULT_HEIGHT"),
	new TypeInfo("FloatRange", "float", "FloatField", "DEFAULT_HEIGHT")
};
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEditor;

using Crunchy.Dough;
using Crunchy.Bun;
using Crunchy.Sandwich;

namespace Crunchy.SandwichBag
{
<#foreach(TypeInfo type in types){#>
	[EditorGUIElementForType(typeof(<#=type.type_name#>), true)]
    public class EditorGUIElement_EditPropertySingleValue_Basic_BuiltIn_<#=type.type_name#> : EditorGUIElement_EditPropertySingleValue_Basic_BuiltIn<<#=type.type_name#>>
    {
		private RangeAttribute range_attribute;

        protected override <#=type.type_name#> DrawBuiltInInternal(Rect rect, GUIContent label, <#=type.type_name#> value)
        {
			if(range_attribute != null)
				return (<#=type.type_name#>)EditorGUIExtensions.RangeSlider(rect, label, (<#=type.type_name#>)value, new FloatRange(range_attribute.min, range_attribute.max));
			else
			{
				Rect x1_rect;
				Rect x2_rect;

				rect.SplitByXCenter(out x1_rect, out x2_rect);

				<#=type.primitive_name#> x1 = EditorGUI.<#=type.function_name#>(x1_rect, label, value.x1);
				<#=type.primitive_name#> x2 = EditorGUI.<#=type.function_name#>(x2_rect, "->", value.x2);

				return new <#=type.type_name#>(x1, x2);
			}
        }

        public EditorGUIElement_EditPropertySingleValue_Basic_BuiltIn_<#=type.type_name#>(EditProperty_Single_Value p) : base(p)
		{
			range_attribute = p.GetCustomAttributeOfType<RangeAttribute>(true);
		}
    }

<#}#>
}

<#+
public class TypeInfo
{
	public readonly string type_name;
	public readonly string primitive_name;
	public readonly string function_name;

	public readonly string height;

	public TypeInfo(string t, string p, string f, string h)
	{
		type_name = t;
		primitive_name = p;
		function_name = f;

		height = h;
	}
}
#>