<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string[] types = new string[]{
	"Component",
	"Axis",
	"Button",
	"Stick"
};
#>
using System;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEditor;

namespace Crunchy.SandwichBag
{
    using Dough;    using Sandwich;
    
    <#foreach(string type in types){#>

    [EditorGUIElementForType(typeof(InputDevice<#=type#>Id), true)]
    public class EditorGUIElement_EditPropertySingleValue_Popup_InputDevice<#=type#>Id : EditorGUIElement_EditPropertySingleValue_Popup<InputDevice<#=type#>Id>
    {
        public EditorGUIElement_EditPropertySingleValue_Popup_InputDevice<#=type#>Id(EditProperty_Single_Value p) : base(p) { }

        public override IEnumerable<InputDevice<#=type#>Id> GetOptions()
        {
            return InputDevice<#=type#>Id.Get<#=type#>s();
        }
    }
<#}#>
}