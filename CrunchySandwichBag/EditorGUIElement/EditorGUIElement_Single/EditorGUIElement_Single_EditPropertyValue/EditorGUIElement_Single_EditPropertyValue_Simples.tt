<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
TypeInfo[] types = new TypeInfo[]{
	new TypeInfo("bool", "Bool", "Toggle"),
	new TypeInfo("byte", "Byte", "IntField"),
	new TypeInfo("short", "Short", "IntField"),
	new TypeInfo("int", "Int", "IntField"),
	new TypeInfo("long", "Long", "LongField"),
	new TypeInfo("float", "Float", "FloatField"),
	new TypeInfo("double", "Double", "DoubleField"),
	new TypeInfo("string", "String", "TextField"),

	new TypeInfo("Color", "Color", "ColorField"),

	new TypeInfo("Bounds", "Bounds", "BoundsField"),
	new TypeInfo("Rect", "Rect", "RectField"),
	new TypeInfo("Vector2", "Vector2", "Vector2Field"),
	new TypeInfo("Vector3", "Vector3", "Vector3Field"),

	new TypeInfo("Enum", "Enum", "EnumPopup")
};
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEditor;

using CrunchyDough;
using CrunchyBun;
using CrunchySandwich;

namespace CrunchySandwichBag
{
<#foreach(TypeInfo type in types){#>
	[EditorGUIElementForType(typeof(<#=type.type_name#>), true)]
    public class EditorGUIElement_Single_EditPropertyValue_Simple_<#=type.class_name#> : EditorGUIElement_Single_EditPropertyValue_Simple<<#=type.type_name#>>
    {
        protected override <#=type.type_name#> DrawFieldInternal(Rect rect, GUIContent label, <#=type.type_name#> value)
        {
            return (<#=type.type_name#>)EditorGUI.<#=type.function_name#>(rect, label, value);
        }

        public EditorGUIElement_Single_EditPropertyValue_Simple_<#=type.class_name#>(EditProperty_Value p, float h) : base(p, h) { }
        public EditorGUIElement_Single_EditPropertyValue_Simple_<#=type.class_name#>(EditProperty_Value p) : this(p, DEFAULT_HEIGHT) { }
    }

<#}#>
}

<#+
public class TypeInfo
{
	public readonly string type_name;
	public readonly string class_name;
	public readonly string function_name;

	public TypeInfo(string t, string c, string f)
	{
		type_name = t;
		class_name = c;
		function_name = f;
	}
}
#>