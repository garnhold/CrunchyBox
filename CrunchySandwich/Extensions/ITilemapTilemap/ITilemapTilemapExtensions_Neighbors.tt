<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string[] type_names = new string[]{"Tilemap", "ITilemap"};
#>
using System;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEngine.Tilemaps;

namespace Crunchy.Sandwich
{
    using Dough;    
    static public class ITilemapTilemapExtensions_Neighbors
    {
<# foreach(string type_name in type_names){#>
        static public IEnumerable<TileBase> GetCardinalNeighbors(this <#=type_name#> item, Vector3Int position)
        {
            yield return item.GetTile(position + new Vector3Int(0, 1, 0));

            yield return item.GetTile(position + new Vector3Int(-1, 0, 0));
            yield return item.GetTile(position + new Vector3Int(1, 0, 0));

            yield return item.GetTile(position + new Vector3Int(0, -1, 0));
        }

        static public IEnumerable<TileBase> GetOrdinalNeighbors(this <#=type_name#> item, Vector3Int position)
        {
            yield return item.GetTile(position + new Vector3Int(-1, 1, 0));
            yield return item.GetTile(position + new Vector3Int(1, 1, 0));

            yield return item.GetTile(position + new Vector3Int(-1, -1, 0));
            yield return item.GetTile(position + new Vector3Int(1, -1, 0));
        }

        static public IEnumerable<TileBase> GetNeighbors(this <#=type_name#> item, Vector3Int position)
        {
            yield return item.GetTile(position + new Vector3Int(-1, 1, 0));
            yield return item.GetTile(position + new Vector3Int(0, 1, 0));
            yield return item.GetTile(position + new Vector3Int(1, 1, 0));

            yield return item.GetTile(position + new Vector3Int(-1, 0, 0));
            yield return item.GetTile(position + new Vector3Int(1, 0, 0));

            yield return item.GetTile(position + new Vector3Int(-1, -1, 0));
            yield return item.GetTile(position + new Vector3Int(0, -1, 0));
            yield return item.GetTile(position + new Vector3Int(1, -1, 0));
        }
        
        static public OctoMask GetOctoMask(this <#=type_name#> item, Vector3Int position, Predicate<TileBase> predicate)
        {
            return new OctoMask(
                item.GetNeighbors(position)
                    .Convert(t => predicate(t))
                    .PackBitsToByte()
            );
        }
<#}#>
	}
}