<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string[] type_names = new string[]{"GameObject", "Component"};
#>
using System;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;

namespace Crunchy.Sandwich
{
    using Dough;    
    static public class GameObjectComponentExtensions_GetComponent
    {
<# foreach(string type_name in type_names){#>
		static public Component GetComponentUpward(this <#=type_name#> item, Type type)
        {
            return item.GetSelfAndParents()
                .Convert(i => i.GetComponent(type))
                .SkipNull()
                .GetFirst();
		}
		static public T GetComponentUpward<T>(this <#=type_name#> item)
		{
			return item.GetComponentUpward(typeof(T)).Convert<T>();
		}

		static public Component GetComponentUpwardFromParent(this <#=type_name#> item, Type type)
		{
			return item.GetParent().IfNotNull(p => p.GetComponentUpward(type));
		}
		static public T GetComponentUpwardFromParent<T>(this <#=type_name#> item)
		{
			return item.GetComponentUpwardFromParent(typeof(T)).Convert<T>();
		}

		static public Component GetComponentDownward(this <#=type_name#> item, Type type)
		{
            return item.GetSelfAndDescendants()
                .Convert(i => i.GetComponent(type))
                .SkipNull()
                .GetFirst();
		}
		static public T GetComponentDownward<T>(this <#=type_name#> item)
		{
			return item.GetComponentDownward(typeof(T)).Convert<T>();
		}

		static public Component GetComponentDownwardFromChildren(this <#=type_name#> item, Type type)
		{
			return item.GetChildren()
                .Convert(c => c.GetComponentDownward(type))
                .GetFirstNonNull();
		}
		static public T GetComponentDownwardFromChildren<T>(this <#=type_name#> item)
		{
			return item.GetComponentDownwardFromChildren(typeof(T)).Convert<T>();
		}

		static public Component GetComponentUpwardOrDownward(this <#=type_name#> item, Type type)
		{
			return item.GetComponentUpward(type) ?? item.GetComponentDownward(type);
		}
		static public T GetComponentUpwardOrDownward<T>(this <#=type_name#> item)
		{
			return item.GetComponentUpwardOrDownward(typeof(T)).Convert<T>();
		}

		static public Component GetComponentWithinEntity(this <#=type_name#> item, Type type)
		{
			return item.GetRoot().GetComponentDownward(type);
		}
		static public T GetComponentWithinEntity<T>(this <#=type_name#> item)
		{
			return item.GetComponentWithinEntity(typeof(T)).Convert<T>();
		}

		static public Component GetComponentEX(this <#=type_name#> item, Type type)
		{
			return item.IfNotNull(i => i.GetComponent(type));
		}
		static public T GetComponentEX<T>(this <#=type_name#> item)
		{
			return item.GetComponentEX(typeof(T)).Convert<T>();
		}

<# } #>
	}
}