//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Garrett/Documents/Visual Studio 2013/Projects/CrunchyBox/CrunchyCheese/MExp/MExpGrammar\MExp.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class MExpParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NUMBER=9, 
		ID=10, WHITESPACE=11;
	public const int
		RULE_mExpEntry = 0, RULE_mExpExpression = 1, RULE_mExpUnarySignOperator = 2, 
		RULE_mExpBinaryAdditiveOperator = 3, RULE_mExpBinaryMultiplicativeOperator = 4, 
		RULE_mExpFunction = 5;
	public static readonly string[] ruleNames = {
		"mExpEntry", "mExpExpression", "mExpUnarySignOperator", "mExpBinaryAdditiveOperator", 
		"mExpBinaryMultiplicativeOperator", "mExpFunction"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'-'", "'+'", "'*'", "'/'", "'%'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NUMBER", "ID", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MExp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MExpParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class MExpEntryContext : ParserRuleContext {
		public MExpExpressionContext mExpExpression() {
			return GetRuleContext<MExpExpressionContext>(0);
		}
		public MExpEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpEntry; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpEntryContext mExpEntry() {
		MExpEntryContext _localctx = new MExpEntryContext(Context, State);
		EnterRule(_localctx, 0, RULE_mExpEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; mExpExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MExpExpressionContext : ParserRuleContext {
		public MExpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpExpression; } }
	 
		public MExpExpressionContext() { }
		public virtual void CopyFrom(MExpExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MExpExpression_ConstantContext : MExpExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(MExpParser.NUMBER, 0); }
		public MExpExpression_ConstantContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_AdditiveContext : MExpExpressionContext {
		public MExpExpressionContext[] mExpExpression() {
			return GetRuleContexts<MExpExpressionContext>();
		}
		public MExpExpressionContext mExpExpression(int i) {
			return GetRuleContext<MExpExpressionContext>(i);
		}
		public MExpBinaryAdditiveOperatorContext mExpBinaryAdditiveOperator() {
			return GetRuleContext<MExpBinaryAdditiveOperatorContext>(0);
		}
		public MExpExpression_AdditiveContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Additive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_SignContext : MExpExpressionContext {
		public MExpUnarySignOperatorContext mExpUnarySignOperator() {
			return GetRuleContext<MExpUnarySignOperatorContext>(0);
		}
		public MExpExpressionContext mExpExpression() {
			return GetRuleContext<MExpExpressionContext>(0);
		}
		public MExpExpression_SignContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Sign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_TermContext : MExpExpressionContext {
		public ITerminalNode ID() { return GetToken(MExpParser.ID, 0); }
		public MExpExpression_TermContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Term(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_GroupContext : MExpExpressionContext {
		public MExpExpressionContext mExpExpression() {
			return GetRuleContext<MExpExpressionContext>(0);
		}
		public MExpExpression_GroupContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Group(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_MultiplicativeContext : MExpExpressionContext {
		public MExpExpressionContext[] mExpExpression() {
			return GetRuleContexts<MExpExpressionContext>();
		}
		public MExpExpressionContext mExpExpression(int i) {
			return GetRuleContext<MExpExpressionContext>(i);
		}
		public MExpBinaryMultiplicativeOperatorContext mExpBinaryMultiplicativeOperator() {
			return GetRuleContext<MExpBinaryMultiplicativeOperatorContext>(0);
		}
		public MExpExpression_MultiplicativeContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Multiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpExpression_FunctionContext : MExpExpressionContext {
		public MExpFunctionContext mExpFunction() {
			return GetRuleContext<MExpFunctionContext>(0);
		}
		public MExpExpression_FunctionContext(MExpExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpExpression_Function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpExpressionContext mExpExpression() {
		return mExpExpression(0);
	}

	private MExpExpressionContext mExpExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MExpExpressionContext _localctx = new MExpExpressionContext(Context, _parentState);
		MExpExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_mExpExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new MExpExpression_SignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 15; mExpUnarySignOperator();
				State = 16; mExpExpression(3);
				}
				break;
			case 2:
				{
				_localctx = new MExpExpression_ConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18; Match(NUMBER);
				}
				break;
			case 3:
				{
				_localctx = new MExpExpression_TermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(ID);
				}
				break;
			case 4:
				{
				_localctx = new MExpExpression_FunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; mExpFunction();
				}
				break;
			case 5:
				{
				_localctx = new MExpExpression_GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 21; Match(T__0);
				State = 22; mExpExpression(0);
				State = 23; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 37;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 35;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MExpExpression_MultiplicativeContext(new MExpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mExpExpression);
						State = 27;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 28; mExpBinaryMultiplicativeOperator();
						State = 29; mExpExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new MExpExpression_AdditiveContext(new MExpExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mExpExpression);
						State = 31;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 32; mExpBinaryAdditiveOperator();
						State = 33; mExpExpression(2);
						}
						break;
					}
					} 
				}
				State = 39;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MExpUnarySignOperatorContext : ParserRuleContext {
		public MExpUnarySignOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpUnarySignOperator; } }
	 
		public MExpUnarySignOperatorContext() { }
		public virtual void CopyFrom(MExpUnarySignOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MExpUnaryOperator_NegateContext : MExpUnarySignOperatorContext {
		public MExpUnaryOperator_NegateContext(MExpUnarySignOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpUnaryOperator_Negate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpUnarySignOperatorContext mExpUnarySignOperator() {
		MExpUnarySignOperatorContext _localctx = new MExpUnarySignOperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_mExpUnarySignOperator);
		try {
			_localctx = new MExpUnaryOperator_NegateContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MExpBinaryAdditiveOperatorContext : ParserRuleContext {
		public MExpBinaryAdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpBinaryAdditiveOperator; } }
	 
		public MExpBinaryAdditiveOperatorContext() { }
		public virtual void CopyFrom(MExpBinaryAdditiveOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MExpBinaryAdditiveOperator_SubtractionContext : MExpBinaryAdditiveOperatorContext {
		public MExpBinaryAdditiveOperator_SubtractionContext(MExpBinaryAdditiveOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpBinaryAdditiveOperator_Subtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpBinaryAdditiveOperator_AdditionContext : MExpBinaryAdditiveOperatorContext {
		public MExpBinaryAdditiveOperator_AdditionContext(MExpBinaryAdditiveOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpBinaryAdditiveOperator_Addition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpBinaryAdditiveOperatorContext mExpBinaryAdditiveOperator() {
		MExpBinaryAdditiveOperatorContext _localctx = new MExpBinaryAdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_mExpBinaryAdditiveOperator);
		try {
			State = 44;
			switch (TokenStream.La(1)) {
			case T__3:
				_localctx = new MExpBinaryAdditiveOperator_AdditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; Match(T__3);
				}
				break;
			case T__2:
				_localctx = new MExpBinaryAdditiveOperator_SubtractionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MExpBinaryMultiplicativeOperatorContext : ParserRuleContext {
		public MExpBinaryMultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpBinaryMultiplicativeOperator; } }
	 
		public MExpBinaryMultiplicativeOperatorContext() { }
		public virtual void CopyFrom(MExpBinaryMultiplicativeOperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MExpBinaryMultiplicativeOperator_MultiplicationContext : MExpBinaryMultiplicativeOperatorContext {
		public MExpBinaryMultiplicativeOperator_MultiplicationContext(MExpBinaryMultiplicativeOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpBinaryMultiplicativeOperator_Multiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpBinaryMultiplicativeOperator_DivisionContext : MExpBinaryMultiplicativeOperatorContext {
		public MExpBinaryMultiplicativeOperator_DivisionContext(MExpBinaryMultiplicativeOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpBinaryMultiplicativeOperator_Division(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MExpBinaryMultiplicativeOperator_ModuloContext : MExpBinaryMultiplicativeOperatorContext {
		public MExpBinaryMultiplicativeOperator_ModuloContext(MExpBinaryMultiplicativeOperatorContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpBinaryMultiplicativeOperator_Modulo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpBinaryMultiplicativeOperatorContext mExpBinaryMultiplicativeOperator() {
		MExpBinaryMultiplicativeOperatorContext _localctx = new MExpBinaryMultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_mExpBinaryMultiplicativeOperator);
		try {
			State = 49;
			switch (TokenStream.La(1)) {
			case T__4:
				_localctx = new MExpBinaryMultiplicativeOperator_MultiplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(T__4);
				}
				break;
			case T__5:
				_localctx = new MExpBinaryMultiplicativeOperator_DivisionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(T__5);
				}
				break;
			case T__6:
				_localctx = new MExpBinaryMultiplicativeOperator_ModuloContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MExpFunctionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MExpParser.ID, 0); }
		public MExpExpressionContext[] mExpExpression() {
			return GetRuleContexts<MExpExpressionContext>();
		}
		public MExpExpressionContext mExpExpression(int i) {
			return GetRuleContext<MExpExpressionContext>(i);
		}
		public MExpFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mExpFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMExpVisitor<TResult> typedVisitor = visitor as IMExpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMExpFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MExpFunctionContext mExpFunction() {
		MExpFunctionContext _localctx = new MExpFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_mExpFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(ID);
			State = 52; Match(T__0);
			State = 61;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << NUMBER) | (1L << ID))) != 0)) {
				{
				State = 53; mExpExpression(0);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__7) {
					{
					{
					State = 54; Match(T__7);
					State = 55; mExpExpression(0);
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 63; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return mExpExpression_sempred((MExpExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mExpExpression_sempred(MExpExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\r\x44\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1C"+
		"\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3&\n\x3\f\x3"+
		"\xE\x3)\v\x3\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5/\n\x5\x3\x6\x3\x6\x3\x6\x5"+
		"\x6\x34\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\a\a;\n\a\f\a\xE\a>\v\a\x5\a@\n\a"+
		"\x3\a\x3\a\x3\a\x2\x3\x4\b\x2\x4\x6\b\n\f\x2\x2H\x2\xE\x3\x2\x2\x2\x4"+
		"\x1B\x3\x2\x2\x2\x6*\x3\x2\x2\x2\b.\x3\x2\x2\x2\n\x33\x3\x2\x2\x2\f\x35"+
		"\x3\x2\x2\x2\xE\xF\x5\x4\x3\x2\xF\x3\x3\x2\x2\x2\x10\x11\b\x3\x1\x2\x11"+
		"\x12\x5\x6\x4\x2\x12\x13\x5\x4\x3\x5\x13\x1C\x3\x2\x2\x2\x14\x1C\a\v\x2"+
		"\x2\x15\x1C\a\f\x2\x2\x16\x1C\x5\f\a\x2\x17\x18\a\x3\x2\x2\x18\x19\x5"+
		"\x4\x3\x2\x19\x1A\a\x4\x2\x2\x1A\x1C\x3\x2\x2\x2\x1B\x10\x3\x2\x2\x2\x1B"+
		"\x14\x3\x2\x2\x2\x1B\x15\x3\x2\x2\x2\x1B\x16\x3\x2\x2\x2\x1B\x17\x3\x2"+
		"\x2\x2\x1C\'\x3\x2\x2\x2\x1D\x1E\f\x4\x2\x2\x1E\x1F\x5\n\x6\x2\x1F \x5"+
		"\x4\x3\x5 &\x3\x2\x2\x2!\"\f\x3\x2\x2\"#\x5\b\x5\x2#$\x5\x4\x3\x4$&\x3"+
		"\x2\x2\x2%\x1D\x3\x2\x2\x2%!\x3\x2\x2\x2&)\x3\x2\x2\x2\'%\x3\x2\x2\x2"+
		"\'(\x3\x2\x2\x2(\x5\x3\x2\x2\x2)\'\x3\x2\x2\x2*+\a\x5\x2\x2+\a\x3\x2\x2"+
		"\x2,/\a\x6\x2\x2-/\a\x5\x2\x2.,\x3\x2\x2\x2.-\x3\x2\x2\x2/\t\x3\x2\x2"+
		"\x2\x30\x34\a\a\x2\x2\x31\x34\a\b\x2\x2\x32\x34\a\t\x2\x2\x33\x30\x3\x2"+
		"\x2\x2\x33\x31\x3\x2\x2\x2\x33\x32\x3\x2\x2\x2\x34\v\x3\x2\x2\x2\x35\x36"+
		"\a\f\x2\x2\x36?\a\x3\x2\x2\x37<\x5\x4\x3\x2\x38\x39\a\n\x2\x2\x39;\x5"+
		"\x4\x3\x2:\x38\x3\x2\x2\x2;>\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2="+
		"@\x3\x2\x2\x2><\x3\x2\x2\x2?\x37\x3\x2\x2\x2?@\x3\x2\x2\x2@\x41\x3\x2"+
		"\x2\x2\x41\x42\a\x4\x2\x2\x42\r\x3\x2\x2\x2\t\x1B%\'.\x33<?";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
