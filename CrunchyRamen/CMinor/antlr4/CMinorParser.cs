//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Garrett/Documents/Visual Studio 2013/Projects/CrunchyBox/CrunchyRamen/CMinor/CMinorGrammar\CMinor.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class CMinorParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		BOOL=18, INT=19, FLOAT=20, DOUBLE=21, STRING=22, ID=23, WHITESPACE=24;
	public const int
		RULE_cMinorType = 0, RULE_cMinorTypeList = 1, RULE_cMinorConstant = 2, 
		RULE_cMinorMember = 3, RULE_cMinorExpression = 4, RULE_cMinorMultiplicativeOperator = 5, 
		RULE_cMinorAdditiveOperator = 6, RULE_cMinorComparativeOperator = 7, RULE_cMinorBooleanOperator = 8, 
		RULE_cMinorExpressionList = 9;
	public static readonly string[] ruleNames = {
		"cMinorType", "cMinorTypeList", "cMinorConstant", "cMinorMember", "cMinorExpression", 
		"cMinorMultiplicativeOperator", "cMinorAdditiveOperator", "cMinorComparativeOperator", 
		"cMinorBooleanOperator", "cMinorExpressionList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "'['", "']'", "','", "'.'", "'('", "')'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'='", "'!'", "'&'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "BOOL", "INT", "FLOAT", "DOUBLE", 
		"STRING", "ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CMinor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CMinorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CMinorTypeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorTypeListContext cMinorTypeList() {
			return GetRuleContext<CMinorTypeListContext>(0);
		}
		public CMinorTypeContext cMinorType() {
			return GetRuleContext<CMinorTypeContext>(0);
		}
		public CMinorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorTypeContext cMinorType() {
		return cMinorType(0);
	}

	private CMinorTypeContext cMinorType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CMinorTypeContext _localctx = new CMinorTypeContext(Context, _parentState);
		CMinorTypeContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_cMinorType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 21; Match(ID);
				}
				break;
			case 2:
				{
				State = 22; Match(ID);
				State = 23; Match(T__0);
				State = 24; cMinorTypeList();
				State = 25; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CMinorTypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cMinorType);
					State = 29;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 30; Match(T__2);
					State = 31; Match(T__3);
					}
					} 
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CMinorTypeListContext : ParserRuleContext {
		public CMinorTypeContext[] cMinorType() {
			return GetRuleContexts<CMinorTypeContext>();
		}
		public CMinorTypeContext cMinorType(int i) {
			return GetRuleContext<CMinorTypeContext>(i);
		}
		public CMinorTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorTypeList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorTypeListContext cMinorTypeList() {
		CMinorTypeListContext _localctx = new CMinorTypeListContext(Context, State);
		EnterRule(_localctx, 2, RULE_cMinorTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; cMinorType(0);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 38; Match(T__4);
				State = 39; cMinorType(0);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorConstantContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CMinorParser.BOOL, 0); }
		public ITerminalNode INT() { return GetToken(CMinorParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(CMinorParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CMinorParser.DOUBLE, 0); }
		public ITerminalNode STRING() { return GetToken(CMinorParser.STRING, 0); }
		public CMinorConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorConstant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorConstantContext cMinorConstant() {
		CMinorConstantContext _localctx = new CMinorConstantContext(Context, State);
		EnterRule(_localctx, 4, RULE_cMinorConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorMemberContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorTypeListContext cMinorTypeList() {
			return GetRuleContext<CMinorTypeListContext>(0);
		}
		public CMinorMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorMember; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorMemberContext cMinorMember() {
		CMinorMemberContext _localctx = new CMinorMemberContext(Context, State);
		EnterRule(_localctx, 6, RULE_cMinorMember);
		try {
			State = 53;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(ID);
				State = 49; Match(T__0);
				State = 50; cMinorTypeList();
				State = 51; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorExpressionContext : ParserRuleContext {
		public CMinorConstantContext cMinorConstant() {
			return GetRuleContext<CMinorConstantContext>(0);
		}
		public CMinorMemberContext cMinorMember() {
			return GetRuleContext<CMinorMemberContext>(0);
		}
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorMultiplicativeOperatorContext cMinorMultiplicativeOperator() {
			return GetRuleContext<CMinorMultiplicativeOperatorContext>(0);
		}
		public CMinorAdditiveOperatorContext cMinorAdditiveOperator() {
			return GetRuleContext<CMinorAdditiveOperatorContext>(0);
		}
		public CMinorComparativeOperatorContext cMinorComparativeOperator() {
			return GetRuleContext<CMinorComparativeOperatorContext>(0);
		}
		public CMinorBooleanOperatorContext cMinorBooleanOperator() {
			return GetRuleContext<CMinorBooleanOperatorContext>(0);
		}
		public CMinorExpressionListContext cMinorExpressionList() {
			return GetRuleContext<CMinorExpressionListContext>(0);
		}
		public CMinorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorExpressionContext cMinorExpression() {
		return cMinorExpression(0);
	}

	private CMinorExpressionContext cMinorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CMinorExpressionContext _localctx = new CMinorExpressionContext(Context, _parentState);
		CMinorExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_cMinorExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			switch (TokenStream.La(1)) {
			case BOOL:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				State = 56; cMinorConstant();
				}
				break;
			case ID:
				{
				State = 57; cMinorMember();
				}
				break;
			case T__6:
				{
				State = 58; Match(T__6);
				State = 59; cMinorExpression(0);
				State = 60; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 89;
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 64;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 65; cMinorMultiplicativeOperator();
						State = 66; cMinorExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 68;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 69; cMinorAdditiveOperator();
						State = 70; cMinorExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 72;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 73; cMinorComparativeOperator();
						State = 74; cMinorExpression(3);
						}
						break;
					case 4:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 76;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 77; cMinorBooleanOperator();
						State = 78; cMinorExpression(2);
						}
						break;
					case 5:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 80;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 81; Match(T__5);
						State = 82; cMinorMember();
						}
						break;
					case 6:
						{
						_localctx = new CMinorExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 83;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 84; Match(T__6);
						State = 86;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
							{
							State = 85; cMinorExpressionList();
							}
						}

						State = 88; Match(T__7);
						}
						break;
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CMinorMultiplicativeOperatorContext : ParserRuleContext {
		public CMinorMultiplicativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorMultiplicativeOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorMultiplicativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorMultiplicativeOperatorContext cMinorMultiplicativeOperator() {
		CMinorMultiplicativeOperatorContext _localctx = new CMinorMultiplicativeOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_cMinorMultiplicativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorAdditiveOperatorContext : ParserRuleContext {
		public CMinorAdditiveOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorAdditiveOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorAdditiveOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorAdditiveOperatorContext cMinorAdditiveOperator() {
		CMinorAdditiveOperatorContext _localctx = new CMinorAdditiveOperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_cMinorAdditiveOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.La(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorComparativeOperatorContext : ParserRuleContext {
		public CMinorComparativeOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorComparativeOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorComparativeOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorComparativeOperatorContext cMinorComparativeOperator() {
		CMinorComparativeOperatorContext _localctx = new CMinorComparativeOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_cMinorComparativeOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 98; Match(T__0);
				State = 100;
				_la = TokenStream.La(1);
				if (_la==T__13) {
					{
					State = 99; Match(T__13);
					}
				}

				}
				break;
			case T__1:
				{
				State = 102; Match(T__1);
				State = 104;
				_la = TokenStream.La(1);
				if (_la==T__13) {
					{
					State = 103; Match(T__13);
					}
				}

				}
				break;
			case T__13:
				{
				State = 106; Match(T__13);
				State = 107; Match(T__13);
				}
				break;
			case T__14:
				{
				State = 108; Match(T__14);
				State = 109; Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorBooleanOperatorContext : ParserRuleContext {
		public CMinorBooleanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorBooleanOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBooleanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorBooleanOperatorContext cMinorBooleanOperator() {
		CMinorBooleanOperatorContext _localctx = new CMinorBooleanOperatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_cMinorBooleanOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.La(1);
			if ( !(_la==T__15 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorExpressionListContext : ParserRuleContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorExpressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorExpressionListContext cMinorExpressionList() {
		CMinorExpressionListContext _localctx = new CMinorExpressionListContext(Context, State);
		EnterRule(_localctx, 18, RULE_cMinorExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; cMinorExpression(0);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 115; Match(T__4);
				State = 116; cMinorExpression(0);
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return cMinorType_sempred((CMinorTypeContext)_localctx, predIndex);
		case 4: return cMinorExpression_sempred((CMinorExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cMinorType_sempred(CMinorTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cMinorExpression_sempred(CMinorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1A}\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x1E"+
		"\n\x2\x3\x2\x3\x2\x3\x2\a\x2#\n\x2\f\x2\xE\x2&\v\x2\x3\x3\x3\x3\x3\x3"+
		"\a\x3+\n\x3\f\x3\xE\x3.\v\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x38\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6"+
		"\x41\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x5\x6Y\n\x6\x3\x6\a\x6\\\n\x6\f\x6\xE\x6_\v\x6\x3\a\x3\a\x3\b\x3\b"+
		"\x3\t\x3\t\x5\tg\n\t\x3\t\x3\t\x5\tk\n\t\x3\t\x3\t\x3\t\x3\t\x5\tq\n\t"+
		"\x3\n\x3\n\x3\v\x3\v\x3\v\a\vx\n\v\f\v\xE\v{\v\v\x3\v\x2\x4\x2\n\f\x2"+
		"\x4\x6\b\n\f\xE\x10\x12\x14\x2\x6\x3\x2\x14\x18\x3\x2\v\r\x3\x2\xE\xF"+
		"\x3\x2\x12\x13\x85\x2\x1D\x3\x2\x2\x2\x4\'\x3\x2\x2\x2\x6/\x3\x2\x2\x2"+
		"\b\x37\x3\x2\x2\x2\n@\x3\x2\x2\x2\f`\x3\x2\x2\x2\xE\x62\x3\x2\x2\x2\x10"+
		"p\x3\x2\x2\x2\x12r\x3\x2\x2\x2\x14t\x3\x2\x2\x2\x16\x17\b\x2\x1\x2\x17"+
		"\x1E\a\x19\x2\x2\x18\x19\a\x19\x2\x2\x19\x1A\a\x3\x2\x2\x1A\x1B\x5\x4"+
		"\x3\x2\x1B\x1C\a\x4\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\x16\x3\x2\x2\x2\x1D"+
		"\x18\x3\x2\x2\x2\x1E$\x3\x2\x2\x2\x1F \f\x3\x2\x2 !\a\x5\x2\x2!#\a\x6"+
		"\x2\x2\"\x1F\x3\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\x3"+
		"\x3\x2\x2\x2&$\x3\x2\x2\x2\',\x5\x2\x2\x2()\a\a\x2\x2)+\x5\x2\x2\x2*("+
		"\x3\x2\x2\x2+.\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\x5\x3\x2\x2\x2"+
		".,\x3\x2\x2\x2/\x30\t\x2\x2\x2\x30\a\x3\x2\x2\x2\x31\x38\a\x19\x2\x2\x32"+
		"\x33\a\x19\x2\x2\x33\x34\a\x3\x2\x2\x34\x35\x5\x4\x3\x2\x35\x36\a\x4\x2"+
		"\x2\x36\x38\x3\x2\x2\x2\x37\x31\x3\x2\x2\x2\x37\x32\x3\x2\x2\x2\x38\t"+
		"\x3\x2\x2\x2\x39:\b\x6\x1\x2:\x41\x5\x6\x4\x2;\x41\x5\b\x5\x2<=\a\t\x2"+
		"\x2=>\x5\n\x6\x2>?\a\n\x2\x2?\x41\x3\x2\x2\x2@\x39\x3\x2\x2\x2@;\x3\x2"+
		"\x2\x2@<\x3\x2\x2\x2\x41]\x3\x2\x2\x2\x42\x43\f\x6\x2\x2\x43\x44\x5\f"+
		"\a\x2\x44\x45\x5\n\x6\a\x45\\\x3\x2\x2\x2\x46G\f\x5\x2\x2GH\x5\xE\b\x2"+
		"HI\x5\n\x6\x6I\\\x3\x2\x2\x2JK\f\x4\x2\x2KL\x5\x10\t\x2LM\x5\n\x6\x5M"+
		"\\\x3\x2\x2\x2NO\f\x3\x2\x2OP\x5\x12\n\x2PQ\x5\n\x6\x4Q\\\x3\x2\x2\x2"+
		"RS\f\t\x2\x2ST\a\b\x2\x2T\\\x5\b\x5\x2UV\f\b\x2\x2VX\a\t\x2\x2WY\x5\x14"+
		"\v\x2XW\x3\x2\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\\\a\n\x2\x2[\x42\x3\x2"+
		"\x2\x2[\x46\x3\x2\x2\x2[J\x3\x2\x2\x2[N\x3\x2\x2\x2[R\x3\x2\x2\x2[U\x3"+
		"\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\v\x3\x2\x2\x2_]"+
		"\x3\x2\x2\x2`\x61\t\x3\x2\x2\x61\r\x3\x2\x2\x2\x62\x63\t\x4\x2\x2\x63"+
		"\xF\x3\x2\x2\x2\x64\x66\a\x3\x2\x2\x65g\a\x10\x2\x2\x66\x65\x3\x2\x2\x2"+
		"\x66g\x3\x2\x2\x2gq\x3\x2\x2\x2hj\a\x4\x2\x2ik\a\x10\x2\x2ji\x3\x2\x2"+
		"\x2jk\x3\x2\x2\x2kq\x3\x2\x2\x2lm\a\x10\x2\x2mq\a\x10\x2\x2no\a\x11\x2"+
		"\x2oq\a\x10\x2\x2p\x64\x3\x2\x2\x2ph\x3\x2\x2\x2pl\x3\x2\x2\x2pn\x3\x2"+
		"\x2\x2q\x11\x3\x2\x2\x2rs\t\x5\x2\x2s\x13\x3\x2\x2\x2ty\x5\n\x6\x2uv\a"+
		"\a\x2\x2vx\x5\n\x6\x2wu\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2"+
		"\x2\x2z\x15\x3\x2\x2\x2{y\x3\x2\x2\x2\xE\x1D$,\x37@X[]\x66jpy";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
