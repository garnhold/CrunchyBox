//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Garrett/Documents/Visual Studio 2013/Projects/CrunchyBox/CrunchyRamen/CMinor/CMinorGrammar\CMinor.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class CMinorParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, BOOL=26, INT=27, FLOAT=28, DOUBLE=29, STRING=30, ID=31, WHITESPACE=32;
	public const int
		RULE_cMinorType = 0, RULE_cMinorTypeList = 1, RULE_cMinorLiteral = 2, 
		RULE_cMinorExpression = 3, RULE_cMinorBinaryOperator_Multiplicative = 4, 
		RULE_cMinorBinaryOperator_Additive = 5, RULE_cMinorBinaryOperator_Comparative = 6, 
		RULE_cMinorBinaryOperator_Boolean = 7, RULE_cMinorExpressionList = 8, 
		RULE_cMinorStatement = 9, RULE_cMinorStatements = 10;
	public static readonly string[] ruleNames = {
		"cMinorType", "cMinorTypeList", "cMinorLiteral", "cMinorExpression", "cMinorBinaryOperator_Multiplicative", 
		"cMinorBinaryOperator_Additive", "cMinorBinaryOperator_Comparative", "cMinorBinaryOperator_Boolean", 
		"cMinorExpressionList", "cMinorStatement", "cMinorStatements"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "'['", "']'", "','", "'null'", "'this'", "'.'", "'('", 
		"')'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!'", "'&'", "'|'", 
		"';'", "'{'", "'}'", "'if'", "'else'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "BOOL", "INT", "FLOAT", "DOUBLE", "STRING", "ID", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CMinor.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CMinorParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CMinorTypeContext : ParserRuleContext {
		public CMinorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorType; } }
	 
		public CMinorTypeContext() { }
		public virtual void CopyFrom(CMinorTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorType_NormalContext : CMinorTypeContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorType_NormalContext(CMinorTypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorType_Normal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorType_TemplatedContext : CMinorTypeContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorTypeListContext cMinorTypeList() {
			return GetRuleContext<CMinorTypeListContext>(0);
		}
		public CMinorType_TemplatedContext(CMinorTypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorType_Templated(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorType_ArrayContext : CMinorTypeContext {
		public CMinorTypeContext cMinorType() {
			return GetRuleContext<CMinorTypeContext>(0);
		}
		public CMinorType_ArrayContext(CMinorTypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorType_Array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorTypeContext cMinorType() {
		return cMinorType(0);
	}

	private CMinorTypeContext cMinorType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CMinorTypeContext _localctx = new CMinorTypeContext(Context, _parentState);
		CMinorTypeContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_cMinorType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new CMinorType_NormalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 23; Match(ID);
				}
				break;
			case 2:
				{
				_localctx = new CMinorType_TemplatedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(ID);
				State = 25; Match(T__0);
				State = 26; cMinorTypeList();
				State = 27; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CMinorType_ArrayContext(new CMinorTypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_cMinorType);
					State = 31;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 32; Match(T__2);
					State = 33; Match(T__3);
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CMinorTypeListContext : ParserRuleContext {
		public CMinorTypeContext[] cMinorType() {
			return GetRuleContexts<CMinorTypeContext>();
		}
		public CMinorTypeContext cMinorType(int i) {
			return GetRuleContext<CMinorTypeContext>(i);
		}
		public CMinorTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorTypeList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorTypeListContext cMinorTypeList() {
		CMinorTypeListContext _localctx = new CMinorTypeListContext(Context, State);
		EnterRule(_localctx, 2, RULE_cMinorTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; cMinorType(0);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 40; Match(T__4);
				State = 41; cMinorType(0);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorLiteralContext : ParserRuleContext {
		public CMinorLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorLiteral; } }
	 
		public CMinorLiteralContext() { }
		public virtual void CopyFrom(CMinorLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorLiteral_IntContext : CMinorLiteralContext {
		public ITerminalNode INT() { return GetToken(CMinorParser.INT, 0); }
		public CMinorLiteral_IntContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_Int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorLiteral_FloatContext : CMinorLiteralContext {
		public ITerminalNode FLOAT() { return GetToken(CMinorParser.FLOAT, 0); }
		public CMinorLiteral_FloatContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_Float(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorLiteral_StringContext : CMinorLiteralContext {
		public ITerminalNode STRING() { return GetToken(CMinorParser.STRING, 0); }
		public CMinorLiteral_StringContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_String(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorLiteral_BoolContext : CMinorLiteralContext {
		public ITerminalNode BOOL() { return GetToken(CMinorParser.BOOL, 0); }
		public CMinorLiteral_BoolContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_Bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorLiteral_NullContext : CMinorLiteralContext {
		public CMinorLiteral_NullContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_Null(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorLiteral_DoubleContext : CMinorLiteralContext {
		public ITerminalNode DOUBLE() { return GetToken(CMinorParser.DOUBLE, 0); }
		public CMinorLiteral_DoubleContext(CMinorLiteralContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorLiteral_Double(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorLiteralContext cMinorLiteral() {
		CMinorLiteralContext _localctx = new CMinorLiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_cMinorLiteral);
		try {
			State = 53;
			switch (TokenStream.La(1)) {
			case T__5:
				_localctx = new CMinorLiteral_NullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; Match(T__5);
				}
				break;
			case BOOL:
				_localctx = new CMinorLiteral_BoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(BOOL);
				}
				break;
			case INT:
				_localctx = new CMinorLiteral_IntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; Match(INT);
				}
				break;
			case FLOAT:
				_localctx = new CMinorLiteral_FloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; Match(FLOAT);
				}
				break;
			case DOUBLE:
				_localctx = new CMinorLiteral_DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 51; Match(DOUBLE);
				}
				break;
			case STRING:
				_localctx = new CMinorLiteral_StringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 52; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorExpressionContext : ParserRuleContext {
		public CMinorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorExpression; } }
	 
		public CMinorExpressionContext() { }
		public virtual void CopyFrom(CMinorExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorExpression_DirectIdentifierContext : CMinorExpressionContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorExpression_DirectIdentifierContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_DirectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_InvokeGenericContext : CMinorExpressionContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorTypeListContext cMinorTypeList() {
			return GetRuleContext<CMinorTypeListContext>(0);
		}
		public CMinorExpressionListContext cMinorExpressionList() {
			return GetRuleContext<CMinorExpressionListContext>(0);
		}
		public CMinorExpression_InvokeGenericContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_InvokeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_LiteralContext : CMinorExpressionContext {
		public CMinorLiteralContext cMinorLiteral() {
			return GetRuleContext<CMinorLiteralContext>(0);
		}
		public CMinorExpression_LiteralContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_Literal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_BinaryOperation_ComparativeContext : CMinorExpressionContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorBinaryOperator_ComparativeContext cMinorBinaryOperator_Comparative() {
			return GetRuleContext<CMinorBinaryOperator_ComparativeContext>(0);
		}
		public CMinorExpression_BinaryOperation_ComparativeContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_BinaryOperation_Comparative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_InvokeContext : CMinorExpressionContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorExpressionListContext cMinorExpressionList() {
			return GetRuleContext<CMinorExpressionListContext>(0);
		}
		public CMinorExpression_InvokeContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_BinaryOperation_AdditiveContext : CMinorExpressionContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorBinaryOperator_AdditiveContext cMinorBinaryOperator_Additive() {
			return GetRuleContext<CMinorBinaryOperator_AdditiveContext>(0);
		}
		public CMinorExpression_BinaryOperation_AdditiveContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_BinaryOperation_Additive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_ThisContext : CMinorExpressionContext {
		public CMinorExpression_ThisContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_This(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_GroupContext : CMinorExpressionContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorExpression_GroupContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_Group(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_IndirectIdentifierContext : CMinorExpressionContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorExpression_IndirectIdentifierContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_IndirectIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_BinaryOperation_BooleanContext : CMinorExpressionContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorBinaryOperator_BooleanContext cMinorBinaryOperator_Boolean() {
			return GetRuleContext<CMinorBinaryOperator_BooleanContext>(0);
		}
		public CMinorExpression_BinaryOperation_BooleanContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_BinaryOperation_Boolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_IndexContext : CMinorExpressionContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorExpression_IndexContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_Index(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorExpression_BinaryOperation_MultiplicativeContext : CMinorExpressionContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorBinaryOperator_MultiplicativeContext cMinorBinaryOperator_Multiplicative() {
			return GetRuleContext<CMinorBinaryOperator_MultiplicativeContext>(0);
		}
		public CMinorExpression_BinaryOperation_MultiplicativeContext(CMinorExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpression_BinaryOperation_Multiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorExpressionContext cMinorExpression() {
		return cMinorExpression(0);
	}

	private CMinorExpressionContext cMinorExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CMinorExpressionContext _localctx = new CMinorExpressionContext(Context, _parentState);
		CMinorExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_cMinorExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			switch (TokenStream.La(1)) {
			case T__5:
			case BOOL:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING:
				{
				_localctx = new CMinorExpression_LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 56; cMinorLiteral();
				}
				break;
			case T__6:
				{
				_localctx = new CMinorExpression_ThisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CMinorExpression_DirectIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; Match(ID);
				}
				break;
			case T__8:
				{
				_localctx = new CMinorExpression_GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; Match(T__8);
				State = 60; cMinorExpression(0);
				State = 61; Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 105;
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new CMinorExpression_BinaryOperation_MultiplicativeContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 65;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 66; cMinorBinaryOperator_Multiplicative();
						State = 67; cMinorExpression(5);
						}
						break;
					case 2:
						{
						_localctx = new CMinorExpression_BinaryOperation_AdditiveContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 69;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 70; cMinorBinaryOperator_Additive();
						State = 71; cMinorExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new CMinorExpression_BinaryOperation_ComparativeContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 73;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 74; cMinorBinaryOperator_Comparative();
						State = 75; cMinorExpression(3);
						}
						break;
					case 4:
						{
						_localctx = new CMinorExpression_BinaryOperation_BooleanContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 77;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 78; cMinorBinaryOperator_Boolean();
						State = 79; cMinorExpression(2);
						}
						break;
					case 5:
						{
						_localctx = new CMinorExpression_IndirectIdentifierContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 81;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 82; Match(T__7);
						State = 83; Match(ID);
						}
						break;
					case 6:
						{
						_localctx = new CMinorExpression_InvokeGenericContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 84;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 85; Match(T__0);
						State = 86; cMinorTypeList();
						State = 87; Match(T__1);
						State = 88; Match(T__8);
						State = 90;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
							{
							State = 89; cMinorExpressionList();
							}
						}

						State = 92; Match(T__9);
						}
						break;
					case 7:
						{
						_localctx = new CMinorExpression_InvokeContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 94;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 95; Match(T__8);
						State = 97;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
							{
							State = 96; cMinorExpressionList();
							}
						}

						State = 99; Match(T__9);
						}
						break;
					case 8:
						{
						_localctx = new CMinorExpression_IndexContext(new CMinorExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_cMinorExpression);
						State = 100;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 101; Match(T__2);
						State = 102; cMinorExpression(0);
						State = 103; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CMinorBinaryOperator_MultiplicativeContext : ParserRuleContext {
		public CMinorBinaryOperator_MultiplicativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorBinaryOperator_Multiplicative; } }
	 
		public CMinorBinaryOperator_MultiplicativeContext() { }
		public virtual void CopyFrom(CMinorBinaryOperator_MultiplicativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorBinaryOperator_Multiplicative_MultiplyContext : CMinorBinaryOperator_MultiplicativeContext {
		public CMinorBinaryOperator_Multiplicative_MultiplyContext(CMinorBinaryOperator_MultiplicativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Multiplicative_Multiply(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Multiplicative_DivideContext : CMinorBinaryOperator_MultiplicativeContext {
		public CMinorBinaryOperator_Multiplicative_DivideContext(CMinorBinaryOperator_MultiplicativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Multiplicative_Divide(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Multiplicative_ModuloContext : CMinorBinaryOperator_MultiplicativeContext {
		public CMinorBinaryOperator_Multiplicative_ModuloContext(CMinorBinaryOperator_MultiplicativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Multiplicative_Modulo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorBinaryOperator_MultiplicativeContext cMinorBinaryOperator_Multiplicative() {
		CMinorBinaryOperator_MultiplicativeContext _localctx = new CMinorBinaryOperator_MultiplicativeContext(Context, State);
		EnterRule(_localctx, 8, RULE_cMinorBinaryOperator_Multiplicative);
		try {
			State = 113;
			switch (TokenStream.La(1)) {
			case T__10:
				_localctx = new CMinorBinaryOperator_Multiplicative_MultiplyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(T__10);
				}
				break;
			case T__11:
				_localctx = new CMinorBinaryOperator_Multiplicative_DivideContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(T__11);
				}
				break;
			case T__12:
				_localctx = new CMinorBinaryOperator_Multiplicative_ModuloContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorBinaryOperator_AdditiveContext : ParserRuleContext {
		public CMinorBinaryOperator_AdditiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorBinaryOperator_Additive; } }
	 
		public CMinorBinaryOperator_AdditiveContext() { }
		public virtual void CopyFrom(CMinorBinaryOperator_AdditiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorBinaryOperator_Additive_AddContext : CMinorBinaryOperator_AdditiveContext {
		public CMinorBinaryOperator_Additive_AddContext(CMinorBinaryOperator_AdditiveContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Additive_Add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Additive_SubtractContext : CMinorBinaryOperator_AdditiveContext {
		public CMinorBinaryOperator_Additive_SubtractContext(CMinorBinaryOperator_AdditiveContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Additive_Subtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorBinaryOperator_AdditiveContext cMinorBinaryOperator_Additive() {
		CMinorBinaryOperator_AdditiveContext _localctx = new CMinorBinaryOperator_AdditiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_cMinorBinaryOperator_Additive);
		try {
			State = 117;
			switch (TokenStream.La(1)) {
			case T__13:
				_localctx = new CMinorBinaryOperator_Additive_AddContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; Match(T__13);
				}
				break;
			case T__14:
				_localctx = new CMinorBinaryOperator_Additive_SubtractContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(T__14);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorBinaryOperator_ComparativeContext : ParserRuleContext {
		public CMinorBinaryOperator_ComparativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorBinaryOperator_Comparative; } }
	 
		public CMinorBinaryOperator_ComparativeContext() { }
		public virtual void CopyFrom(CMinorBinaryOperator_ComparativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_LessThanOrEqualToContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_LessThanOrEqualToContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_LessThanOrEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_GreaterThanContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_GreaterThanContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_GreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_LessThanContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_LessThanContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_LessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_GreaterThanOrEqualToContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_GreaterThanOrEqualToContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_GreaterThanOrEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_EqualToContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_EqualToContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_EqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Comparative_NotEqualToContext : CMinorBinaryOperator_ComparativeContext {
		public CMinorBinaryOperator_Comparative_NotEqualToContext(CMinorBinaryOperator_ComparativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Comparative_NotEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorBinaryOperator_ComparativeContext cMinorBinaryOperator_Comparative() {
		CMinorBinaryOperator_ComparativeContext _localctx = new CMinorBinaryOperator_ComparativeContext(Context, State);
		EnterRule(_localctx, 12, RULE_cMinorBinaryOperator_Comparative);
		try {
			State = 129;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new CMinorBinaryOperator_Comparative_LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(T__0);
				}
				break;
			case 2:
				_localctx = new CMinorBinaryOperator_Comparative_LessThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; Match(T__0);
				State = 121; Match(T__15);
				}
				break;
			case 3:
				_localctx = new CMinorBinaryOperator_Comparative_GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 122; Match(T__1);
				}
				break;
			case 4:
				_localctx = new CMinorBinaryOperator_Comparative_GreaterThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 123; Match(T__1);
				State = 124; Match(T__15);
				}
				break;
			case 5:
				_localctx = new CMinorBinaryOperator_Comparative_EqualToContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 125; Match(T__15);
				State = 126; Match(T__15);
				}
				break;
			case 6:
				_localctx = new CMinorBinaryOperator_Comparative_NotEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 127; Match(T__16);
				State = 128; Match(T__15);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorBinaryOperator_BooleanContext : ParserRuleContext {
		public CMinorBinaryOperator_BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorBinaryOperator_Boolean; } }
	 
		public CMinorBinaryOperator_BooleanContext() { }
		public virtual void CopyFrom(CMinorBinaryOperator_BooleanContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorBinaryOperator_Boolean_OrContext : CMinorBinaryOperator_BooleanContext {
		public CMinorBinaryOperator_Boolean_OrContext(CMinorBinaryOperator_BooleanContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Boolean_Or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorBinaryOperator_Boolean_AndContext : CMinorBinaryOperator_BooleanContext {
		public CMinorBinaryOperator_Boolean_AndContext(CMinorBinaryOperator_BooleanContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorBinaryOperator_Boolean_And(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorBinaryOperator_BooleanContext cMinorBinaryOperator_Boolean() {
		CMinorBinaryOperator_BooleanContext _localctx = new CMinorBinaryOperator_BooleanContext(Context, State);
		EnterRule(_localctx, 14, RULE_cMinorBinaryOperator_Boolean);
		try {
			State = 133;
			switch (TokenStream.La(1)) {
			case T__17:
				_localctx = new CMinorBinaryOperator_Boolean_AndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(T__17);
				}
				break;
			case T__18:
				_localctx = new CMinorBinaryOperator_Boolean_OrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorExpressionListContext : ParserRuleContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public CMinorExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorExpressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorExpressionListContext cMinorExpressionList() {
		CMinorExpressionListContext _localctx = new CMinorExpressionListContext(Context, State);
		EnterRule(_localctx, 16, RULE_cMinorExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; cMinorExpression(0);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__4) {
				{
				{
				State = 136; Match(T__4);
				State = 137; cMinorExpression(0);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorStatementContext : ParserRuleContext {
		public CMinorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorStatement; } }
	 
		public CMinorStatementContext() { }
		public virtual void CopyFrom(CMinorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CMinorStatement_OperationAssign_IndirectMultiplicativeContext : CMinorStatementContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorBinaryOperator_MultiplicativeContext cMinorBinaryOperator_Multiplicative() {
			return GetRuleContext<CMinorBinaryOperator_MultiplicativeContext>(0);
		}
		public CMinorStatement_OperationAssign_IndirectMultiplicativeContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_OperationAssign_IndirectMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_IfContext : CMinorStatementContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorStatementContext[] cMinorStatement() {
			return GetRuleContexts<CMinorStatementContext>();
		}
		public CMinorStatementContext cMinorStatement(int i) {
			return GetRuleContext<CMinorStatementContext>(i);
		}
		public CMinorStatement_IfContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_If(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_InvokeGenericContext : CMinorStatementContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorTypeListContext cMinorTypeList() {
			return GetRuleContext<CMinorTypeListContext>(0);
		}
		public CMinorExpressionListContext cMinorExpressionList() {
			return GetRuleContext<CMinorExpressionListContext>(0);
		}
		public CMinorStatement_InvokeGenericContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_InvokeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_InvokeContext : CMinorStatementContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorExpressionListContext cMinorExpressionList() {
			return GetRuleContext<CMinorExpressionListContext>(0);
		}
		public CMinorStatement_InvokeContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_Invoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_BlockContext : CMinorStatementContext {
		public CMinorStatementsContext cMinorStatements() {
			return GetRuleContext<CMinorStatementsContext>(0);
		}
		public CMinorStatement_BlockContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_Block(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_OperationAssign_DirectAdditiveContext : CMinorStatementContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorBinaryOperator_AdditiveContext cMinorBinaryOperator_Additive() {
			return GetRuleContext<CMinorBinaryOperator_AdditiveContext>(0);
		}
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorStatement_OperationAssign_DirectAdditiveContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_OperationAssign_DirectAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_DirectAssignContext : CMinorStatementContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorStatement_DirectAssignContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_DirectAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_IndirectAssignContext : CMinorStatementContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorStatement_IndirectAssignContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_IndirectAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_OperationAssign_DirectMultiplicativeContext : CMinorStatementContext {
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorBinaryOperator_MultiplicativeContext cMinorBinaryOperator_Multiplicative() {
			return GetRuleContext<CMinorBinaryOperator_MultiplicativeContext>(0);
		}
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorStatement_OperationAssign_DirectMultiplicativeContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_OperationAssign_DirectMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_OperationAssign_IndirectAdditiveContext : CMinorStatementContext {
		public CMinorExpressionContext[] cMinorExpression() {
			return GetRuleContexts<CMinorExpressionContext>();
		}
		public CMinorExpressionContext cMinorExpression(int i) {
			return GetRuleContext<CMinorExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(CMinorParser.ID, 0); }
		public CMinorBinaryOperator_AdditiveContext cMinorBinaryOperator_Additive() {
			return GetRuleContext<CMinorBinaryOperator_AdditiveContext>(0);
		}
		public CMinorStatement_OperationAssign_IndirectAdditiveContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_OperationAssign_IndirectAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CMinorStatement_WhileContext : CMinorStatementContext {
		public CMinorExpressionContext cMinorExpression() {
			return GetRuleContext<CMinorExpressionContext>(0);
		}
		public CMinorStatementContext cMinorStatement() {
			return GetRuleContext<CMinorStatementContext>(0);
		}
		public CMinorStatement_WhileContext(CMinorStatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatement_While(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorStatementContext cMinorStatement() {
		CMinorStatementContext _localctx = new CMinorStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_cMinorStatement);
		int _la;
		try {
			State = 221;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new CMinorStatement_DirectAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; Match(ID);
				State = 144; Match(T__15);
				State = 145; cMinorExpression(0);
				State = 146; Match(T__19);
				}
				break;
			case 2:
				_localctx = new CMinorStatement_IndirectAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; cMinorExpression(0);
				State = 149; Match(T__7);
				State = 150; Match(ID);
				State = 151; Match(T__15);
				State = 152; cMinorExpression(0);
				State = 153; Match(T__19);
				}
				break;
			case 3:
				_localctx = new CMinorStatement_OperationAssign_DirectAdditiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 155; Match(ID);
				State = 156; cMinorBinaryOperator_Additive();
				State = 157; Match(T__15);
				State = 158; cMinorExpression(0);
				State = 159; Match(T__19);
				}
				break;
			case 4:
				_localctx = new CMinorStatement_OperationAssign_DirectMultiplicativeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 161; Match(ID);
				State = 162; cMinorBinaryOperator_Multiplicative();
				State = 163; Match(T__15);
				State = 164; cMinorExpression(0);
				State = 165; Match(T__19);
				}
				break;
			case 5:
				_localctx = new CMinorStatement_OperationAssign_IndirectAdditiveContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; cMinorExpression(0);
				State = 168; Match(T__7);
				State = 169; Match(ID);
				State = 170; cMinorBinaryOperator_Additive();
				State = 171; Match(T__15);
				State = 172; cMinorExpression(0);
				State = 173; Match(T__19);
				}
				break;
			case 6:
				_localctx = new CMinorStatement_OperationAssign_IndirectMultiplicativeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 175; cMinorExpression(0);
				State = 176; Match(T__7);
				State = 177; Match(ID);
				State = 178; cMinorBinaryOperator_Multiplicative();
				State = 179; Match(T__15);
				State = 180; cMinorExpression(0);
				State = 181; Match(T__19);
				}
				break;
			case 7:
				_localctx = new CMinorStatement_InvokeGenericContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 183; cMinorExpression(0);
				State = 184; Match(T__0);
				State = 185; cMinorTypeList();
				State = 186; Match(T__1);
				State = 187; Match(T__8);
				State = 189;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					State = 188; cMinorExpressionList();
					}
				}

				State = 191; Match(T__9);
				State = 192; Match(T__19);
				}
				break;
			case 8:
				_localctx = new CMinorStatement_InvokeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 194; cMinorExpression(0);
				State = 195; Match(T__8);
				State = 197;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					State = 196; cMinorExpressionList();
					}
				}

				State = 199; Match(T__9);
				State = 200; Match(T__19);
				}
				break;
			case 9:
				_localctx = new CMinorStatement_BlockContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 202; Match(T__20);
				State = 203; cMinorStatements();
				State = 204; Match(T__21);
				}
				break;
			case 10:
				_localctx = new CMinorStatement_IfContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 206; Match(T__22);
				State = 207; Match(T__8);
				State = 208; cMinorExpression(0);
				State = 209; Match(T__9);
				State = 210; cMinorStatement();
				State = 213;
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 211; Match(T__23);
					State = 212; cMinorStatement();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CMinorStatement_WhileContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 215; Match(T__24);
				State = 216; Match(T__8);
				State = 217; cMinorExpression(0);
				State = 218; Match(T__9);
				State = 219; cMinorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CMinorStatementsContext : ParserRuleContext {
		public CMinorStatementContext[] cMinorStatement() {
			return GetRuleContexts<CMinorStatementContext>();
		}
		public CMinorStatementContext cMinorStatement(int i) {
			return GetRuleContext<CMinorStatementContext>(i);
		}
		public CMinorStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cMinorStatements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMinorVisitor<TResult> typedVisitor = visitor as ICMinorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCMinorStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CMinorStatementsContext cMinorStatements() {
		CMinorStatementsContext _localctx = new CMinorStatementsContext(Context, State);
		EnterRule(_localctx, 20, RULE_cMinorStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__8) | (1L << T__20) | (1L << T__22) | (1L << T__24) | (1L << BOOL) | (1L << INT) | (1L << FLOAT) | (1L << DOUBLE) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				{
				State = 223; cMinorStatement();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return cMinorType_sempred((CMinorTypeContext)_localctx, predIndex);
		case 3: return cMinorExpression_sempred((CMinorExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool cMinorType_sempred(CMinorTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cMinorExpression_sempred(CMinorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\"\xE8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x5\x2 \n\x2\x3\x2\x3\x2\x3\x2\a\x2%\n\x2\f\x2\xE\x2(\v\x2\x3\x3\x3\x3"+
		"\x3\x3\a\x3-\n\x3\f\x3\xE\x3\x30\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x38\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5\x42\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5]\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5\x64\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5l\n\x5\f\x5\xE\x5"+
		"o\v\x5\x3\x6\x3\x6\x3\x6\x5\x6t\n\x6\x3\a\x3\a\x5\ax\n\a\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x84\n\b\x3\t\x3\t\x5\t\x88"+
		"\n\t\x3\n\x3\n\x3\n\a\n\x8D\n\n\f\n\xE\n\x90\v\n\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5"+
		"\v\xC0\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xC8\n\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xD8\n\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xE0\n\v\x3\f\a\f\xE3\n\f\f\f\xE\f\xE6\v"+
		"\f\x3\f\x2\x4\x2\b\r\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x2\x2\x109\x2\x1F"+
		"\x3\x2\x2\x2\x4)\x3\x2\x2\x2\x6\x37\x3\x2\x2\x2\b\x41\x3\x2\x2\x2\ns\x3"+
		"\x2\x2\x2\fw\x3\x2\x2\x2\xE\x83\x3\x2\x2\x2\x10\x87\x3\x2\x2\x2\x12\x89"+
		"\x3\x2\x2\x2\x14\xDF\x3\x2\x2\x2\x16\xE4\x3\x2\x2\x2\x18\x19\b\x2\x1\x2"+
		"\x19 \a!\x2\x2\x1A\x1B\a!\x2\x2\x1B\x1C\a\x3\x2\x2\x1C\x1D\x5\x4\x3\x2"+
		"\x1D\x1E\a\x4\x2\x2\x1E \x3\x2\x2\x2\x1F\x18\x3\x2\x2\x2\x1F\x1A\x3\x2"+
		"\x2\x2 &\x3\x2\x2\x2!\"\f\x3\x2\x2\"#\a\x5\x2\x2#%\a\x6\x2\x2$!\x3\x2"+
		"\x2\x2%(\x3\x2\x2\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'\x3\x3\x2\x2\x2(&\x3"+
		"\x2\x2\x2).\x5\x2\x2\x2*+\a\a\x2\x2+-\x5\x2\x2\x2,*\x3\x2\x2\x2-\x30\x3"+
		"\x2\x2\x2.,\x3\x2\x2\x2./\x3\x2\x2\x2/\x5\x3\x2\x2\x2\x30.\x3\x2\x2\x2"+
		"\x31\x38\a\b\x2\x2\x32\x38\a\x1C\x2\x2\x33\x38\a\x1D\x2\x2\x34\x38\a\x1E"+
		"\x2\x2\x35\x38\a\x1F\x2\x2\x36\x38\a \x2\x2\x37\x31\x3\x2\x2\x2\x37\x32"+
		"\x3\x2\x2\x2\x37\x33\x3\x2\x2\x2\x37\x34\x3\x2\x2\x2\x37\x35\x3\x2\x2"+
		"\x2\x37\x36\x3\x2\x2\x2\x38\a\x3\x2\x2\x2\x39:\b\x5\x1\x2:\x42\x5\x6\x4"+
		"\x2;\x42\a\t\x2\x2<\x42\a!\x2\x2=>\a\v\x2\x2>?\x5\b\x5\x2?@\a\f\x2\x2"+
		"@\x42\x3\x2\x2\x2\x41\x39\x3\x2\x2\x2\x41;\x3\x2\x2\x2\x41<\x3\x2\x2\x2"+
		"\x41=\x3\x2\x2\x2\x42m\x3\x2\x2\x2\x43\x44\f\x6\x2\x2\x44\x45\x5\n\x6"+
		"\x2\x45\x46\x5\b\x5\a\x46l\x3\x2\x2\x2GH\f\x5\x2\x2HI\x5\f\a\x2IJ\x5\b"+
		"\x5\x6Jl\x3\x2\x2\x2KL\f\x4\x2\x2LM\x5\xE\b\x2MN\x5\b\x5\x5Nl\x3\x2\x2"+
		"\x2OP\f\x3\x2\x2PQ\x5\x10\t\x2QR\x5\b\x5\x4Rl\x3\x2\x2\x2ST\f\v\x2\x2"+
		"TU\a\n\x2\x2Ul\a!\x2\x2VW\f\n\x2\x2WX\a\x3\x2\x2XY\x5\x4\x3\x2YZ\a\x4"+
		"\x2\x2Z\\\a\v\x2\x2[]\x5\x12\n\x2\\[\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x3\x2"+
		"\x2\x2^_\a\f\x2\x2_l\x3\x2\x2\x2`\x61\f\t\x2\x2\x61\x63\a\v\x2\x2\x62"+
		"\x64\x5\x12\n\x2\x63\x62\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x65\x3\x2"+
		"\x2\x2\x65l\a\f\x2\x2\x66g\f\b\x2\x2gh\a\x5\x2\x2hi\x5\b\x5\x2ij\a\x6"+
		"\x2\x2jl\x3\x2\x2\x2k\x43\x3\x2\x2\x2kG\x3\x2\x2\x2kK\x3\x2\x2\x2kO\x3"+
		"\x2\x2\x2kS\x3\x2\x2\x2kV\x3\x2\x2\x2k`\x3\x2\x2\x2k\x66\x3\x2\x2\x2l"+
		"o\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2n\t\x3\x2\x2\x2om\x3\x2\x2\x2"+
		"pt\a\r\x2\x2qt\a\xE\x2\x2rt\a\xF\x2\x2sp\x3\x2\x2\x2sq\x3\x2\x2\x2sr\x3"+
		"\x2\x2\x2t\v\x3\x2\x2\x2ux\a\x10\x2\x2vx\a\x11\x2\x2wu\x3\x2\x2\x2wv\x3"+
		"\x2\x2\x2x\r\x3\x2\x2\x2y\x84\a\x3\x2\x2z{\a\x3\x2\x2{\x84\a\x12\x2\x2"+
		"|\x84\a\x4\x2\x2}~\a\x4\x2\x2~\x84\a\x12\x2\x2\x7F\x80\a\x12\x2\x2\x80"+
		"\x84\a\x12\x2\x2\x81\x82\a\x13\x2\x2\x82\x84\a\x12\x2\x2\x83y\x3\x2\x2"+
		"\x2\x83z\x3\x2\x2\x2\x83|\x3\x2\x2\x2\x83}\x3\x2\x2\x2\x83\x7F\x3\x2\x2"+
		"\x2\x83\x81\x3\x2\x2\x2\x84\xF\x3\x2\x2\x2\x85\x88\a\x14\x2\x2\x86\x88"+
		"\a\x15\x2\x2\x87\x85\x3\x2\x2\x2\x87\x86\x3\x2\x2\x2\x88\x11\x3\x2\x2"+
		"\x2\x89\x8E\x5\b\x5\x2\x8A\x8B\a\a\x2\x2\x8B\x8D\x5\b\x5\x2\x8C\x8A\x3"+
		"\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2"+
		"\x8F\x13\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x92\a!\x2\x2\x92\x93\a\x12"+
		"\x2\x2\x93\x94\x5\b\x5\x2\x94\x95\a\x16\x2\x2\x95\xE0\x3\x2\x2\x2\x96"+
		"\x97\x5\b\x5\x2\x97\x98\a\n\x2\x2\x98\x99\a!\x2\x2\x99\x9A\a\x12\x2\x2"+
		"\x9A\x9B\x5\b\x5\x2\x9B\x9C\a\x16\x2\x2\x9C\xE0\x3\x2\x2\x2\x9D\x9E\a"+
		"!\x2\x2\x9E\x9F\x5\f\a\x2\x9F\xA0\a\x12\x2\x2\xA0\xA1\x5\b\x5\x2\xA1\xA2"+
		"\a\x16\x2\x2\xA2\xE0\x3\x2\x2\x2\xA3\xA4\a!\x2\x2\xA4\xA5\x5\n\x6\x2\xA5"+
		"\xA6\a\x12\x2\x2\xA6\xA7\x5\b\x5\x2\xA7\xA8\a\x16\x2\x2\xA8\xE0\x3\x2"+
		"\x2\x2\xA9\xAA\x5\b\x5\x2\xAA\xAB\a\n\x2\x2\xAB\xAC\a!\x2\x2\xAC\xAD\x5"+
		"\f\a\x2\xAD\xAE\a\x12\x2\x2\xAE\xAF\x5\b\x5\x2\xAF\xB0\a\x16\x2\x2\xB0"+
		"\xE0\x3\x2\x2\x2\xB1\xB2\x5\b\x5\x2\xB2\xB3\a\n\x2\x2\xB3\xB4\a!\x2\x2"+
		"\xB4\xB5\x5\n\x6\x2\xB5\xB6\a\x12\x2\x2\xB6\xB7\x5\b\x5\x2\xB7\xB8\a\x16"+
		"\x2\x2\xB8\xE0\x3\x2\x2\x2\xB9\xBA\x5\b\x5\x2\xBA\xBB\a\x3\x2\x2\xBB\xBC"+
		"\x5\x4\x3\x2\xBC\xBD\a\x4\x2\x2\xBD\xBF\a\v\x2\x2\xBE\xC0\x5\x12\n\x2"+
		"\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\a"+
		"\f\x2\x2\xC2\xC3\a\x16\x2\x2\xC3\xE0\x3\x2\x2\x2\xC4\xC5\x5\b\x5\x2\xC5"+
		"\xC7\a\v\x2\x2\xC6\xC8\x5\x12\n\x2\xC7\xC6\x3\x2\x2\x2\xC7\xC8\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\a\f\x2\x2\xCA\xCB\a\x16\x2\x2\xCB\xE0"+
		"\x3\x2\x2\x2\xCC\xCD\a\x17\x2\x2\xCD\xCE\x5\x16\f\x2\xCE\xCF\a\x18\x2"+
		"\x2\xCF\xE0\x3\x2\x2\x2\xD0\xD1\a\x19\x2\x2\xD1\xD2\a\v\x2\x2\xD2\xD3"+
		"\x5\b\x5\x2\xD3\xD4\a\f\x2\x2\xD4\xD7\x5\x14\v\x2\xD5\xD6\a\x1A\x2\x2"+
		"\xD6\xD8\x5\x14\v\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xE0\x3"+
		"\x2\x2\x2\xD9\xDA\a\x1B\x2\x2\xDA\xDB\a\v\x2\x2\xDB\xDC\x5\b\x5\x2\xDC"+
		"\xDD\a\f\x2\x2\xDD\xDE\x5\x14\v\x2\xDE\xE0\x3\x2\x2\x2\xDF\x91\x3\x2\x2"+
		"\x2\xDF\x96\x3\x2\x2\x2\xDF\x9D\x3\x2\x2\x2\xDF\xA3\x3\x2\x2\x2\xDF\xA9"+
		"\x3\x2\x2\x2\xDF\xB1\x3\x2\x2\x2\xDF\xB9\x3\x2\x2\x2\xDF\xC4\x3\x2\x2"+
		"\x2\xDF\xCC\x3\x2\x2\x2\xDF\xD0\x3\x2\x2\x2\xDF\xD9\x3\x2\x2\x2\xE0\x15"+
		"\x3\x2\x2\x2\xE1\xE3\x5\x14\v\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2"+
		"\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\x17\x3\x2\x2\x2\xE6\xE4"+
		"\x3\x2\x2\x2\x15\x1F&.\x37\x41\\\x63kmsw\x83\x87\x8E\xBF\xC7\xD7\xDF\xE4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
