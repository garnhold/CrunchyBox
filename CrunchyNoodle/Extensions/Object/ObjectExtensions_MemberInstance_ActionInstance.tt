<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string[] flavors = new string[]{"Weak", "Strong"};
#>
using System;
using System.Collections;
using System.Collections.Generic;

using Crunchy.Dough;
using Crunchy.Salt;

namespace Crunchy.Noodle
{
<#foreach(string flavor in flavors){#>
	static public class ObjectExtensions_MemberInstance_ActionInstance_<#=flavor#>
    {
        static public ActionInstance Get<#=flavor#>ActionInstanceByComponent(this object item, string component, IEnumerable<object> arguments)
        {
			return item.Get<#=flavor#>Target().GetActionInstanceByComponent(component, arguments);
        }
        static public ActionInstance Get<#=flavor#>ActionInstanceByComponent(this object item, string component, params object[] arguments)
        {
            return item.Get<#=flavor#>ActionInstanceByComponent(component, (IEnumerable<object>)arguments);
        }

        static public ActionInstance Get<#=flavor#>ActionInstanceByPathAndComponent(this object item, string path, string component, IEnumerable<object> arguments)
        {
			return item.Get<#=flavor#>Target().GetActionInstanceByPathAndComponent(path, component, arguments);
        }
        static public ActionInstance Get<#=flavor#>ActionInstanceByPathAndComponent(this object item, string path, string component, params object[] arguments)
        {
            return item.Get<#=flavor#>ActionInstanceByPathAndComponent(path, component, (IEnumerable<object>)arguments);
        }

        static public ActionInstance Get<#=flavor#>ActionInstanceByPath(this object item, string full_path, IEnumerable<object> arguments)
        {
            return item.Get<#=flavor#>Target().GetActionInstanceByPath(full_path, arguments);
        }
        static public ActionInstance Get<#=flavor#>ActionInstanceByPath(this object item, string full_path, params object[] arguments)
        {
            return item.Get<#=flavor#>ActionInstanceByPath(full_path, (IEnumerable<object>)arguments);
        }

        static public ActionInstance Get<#=flavor#>ActionInstanceByParentablePath(this object item, object parent, string full_path, IEnumerable<object> arguments)
        {
            if(full_path.TryTrimPrefix("parent.", out full_path))
                return parent.Get<#=flavor#>ActionInstanceByPath(full_path, arguments);

            return item.Get<#=flavor#>ActionInstanceByPath(full_path, arguments);
        }
        static public ActionInstance Get<#=flavor#>ActionInstanceByParentablePath(this object item, object parent, string full_path, params object[] arguments)
        {
            return item.Get<#=flavor#>ActionInstanceByParentablePath(parent, full_path, (IEnumerable<object>)arguments);
        }
    }

<#}#>
}