<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/CrunchyDough/bin/Release/CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Crunchy.Dough" #>
<#@ output extension=".cs" #>
<#
int max_number_parameters = 10;
#>
using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

namespace Crunchy.Noodle
{
    using Dough;
    
    <#for(int i = 1; i <= max_number_parameters; i++){#>
    public class Filterer_ConstructorInfo_CanEffectiveParametersHold<#=TTCS.ArgumentsForGeneric("P#", i)#> : Filterer_ConstructorInfo_CanEffectiveParametersHold
    {
        static public readonly Filterer_ConstructorInfo_CanEffectiveParametersHold<#=TTCS.ArgumentsForGeneric("P#", i)#> INSTANCE = new Filterer_ConstructorInfo_CanEffectiveParametersHold<#=TTCS.ArgumentsForGeneric("P#", i)#>();

        private Filterer_ConstructorInfo_CanEffectiveParametersHold() : base(<#=TTCS.Arguments("typeof(P#)", i)#>)
        {
        }
    }
	static public partial class Filterer_ConstructorInfo
	{
		static public Filterer<ConstructorInfo> CanEffectiveParametersHold<#=TTCS.ArgumentsForGeneric("P#", i)#>()
		{
			return Filterer_ConstructorInfo_CanEffectiveParametersHold<#=TTCS.ArgumentsForGeneric("P#", i)#>.INSTANCE;
		}
	}

<#}#>
}