<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CrunchyDough\bin\Release\CrunchyDough.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrunchyDough" #>
<#@ output extension=".cs" #>
<#
string[] types = new string[]{
	"MethodInfoEX",
	"FieldInfoEX",
	"Type"
};
#>
using System;
using System.IO;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;

using CrunchyDough;
using CrunchySalt;

namespace CrunchyNoodle
{
<#foreach(string type in types){#>
    public partial class <#=type#>Husker : Husker<<#=type#>>
    {
		static public readonly <#=type#>Husker INSTANCE = new <#=type#>Husker();

        private <#=type#>Husker() { }

		public override void Dehydrate(HuskWriter writer, <#=type#> to_dehydrate)
        {
            if (to_dehydrate != null)
            {
                writer.WriteInt(to_dehydrate.MetadataToken);
				writer.WriteRecurrant(to_dehydrate.Module, ModuleHusker.INSTANCE);
            }
            else
            {
                writer.WriteInt(0);
            }
        }

        public override <#=type#> Hydrate(HuskReader reader)
        {
            int metadata_token = reader.ReadInt();

            if (metadata_token != 0)
                return Resolve(reader.ReadRecurrant(ModuleHusker.INSTANCE), metadata_token);

            return null;
        }
    }
	public class <#=type#>ListHusker : ListHusker<<#=type#>>
	{
		static public readonly <#=type#>ListHusker INSTANCE = new <#=type#>ListHusker();

		private <#=type#>ListHusker() : base(<#=type#>Husker.INSTANCE) { }
	}

<#}#>
}