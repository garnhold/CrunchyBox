<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)/CrunchyDough/bin/Release/CrunchyDough.dll" #>
<#@ assembly name="$(SolutionDir)/CrunchySalt/bin/Release/CrunchySalt.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Crunchy.Dough" #>
<#@ import namespace="Crunchy.Salt" #>
<#@ output extension=".cs" #>
<#
string file_text = Files.GetStreamSystem().ReadText(Host.ResolvePath("mime_types.txt"));

List<MIMETypeInfo> infos = file_text
	.GetLines()
    .Skip(s => s.StartsWith("#"))
	.Skip(s => s.IsBlank())
	.Convert(l => l.RegexMatch("(\\S+)\\s+(.*)"))
	.Convert(m => new MIMETypeInfo(m.Groups[1].Value, m.Groups[2].Value.SplitOn(" ")))
    .ToList();
    
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Crunchy.Noodle
{
    using Dough;
    
    public class MIMEGeneralType
    {
        private string value;
        
        <#=infos.Convert(i => "static public readonly MIMEGeneralType " + i.general_type.StyleAsEnumName() + " = new MIMEGeneralType(\"" + i.general_type + "\");").Unique().Join("\n")#>
        
        private MIMEGeneralType(string v)
        {
            value = v;
        }
        
        public override string ToString()
        {
            return value;
        }
    }
    
    public class MIMEType
    {
        private MIMEGeneralType general_type;
        private string sub_value;
        
        private List<string> extensions;
        
        <#=infos.Convert(i => "static public readonly MIMEType " + i.type.StyleAsEnumName() + " = new MIMEType(MIMEGeneralType." + i.general_type.StyleAsEnumName() + ", \"" + i.sub_type + "\", Enumerable.New(" + i.extensions.Convert(e => e.StyleAsDoubleQuoteLiteral()).Join(", ") + "));").Join("\n")#>
        
        static private Dictionary<string, MIMEType> TYPE_LOOKUP_TABLE = Enumerable.New(
            <#=infos.Convert(i => "new KeyValuePair<string, MIMEType>(\"" + i.type + "\", " + i.type.StyleAsEnumName() + ")").Join(",\n")#>
        ).ToDictionary();
        
        static public bool TryParseFromType(string input, out MIMEType type)
        {
            if(TYPE_LOOKUP_TABLE.TryGetValue(input.ToLower(), out type))
                return true;
                
            type = ApplicationOctetStream;
            return false;
        }
        static public MIMEType ParseFromType(string input)
        {
            MIMEType type;
            
            TryParseFromType(input, out type);
            return type;
        }
        
        static private Dictionary<string, MIMEType> EXTENSION_LOOKUP_TABLE = Enumerable.New(
            <#=infos.Convert(i => i.extensions.Convert(e => "new KeyValuePair<string, MIMEType>(\"" + e + "\", " + i.type.StyleAsEnumName() + ")")).Flatten().Join(",\n")#>
        ).ToDictionaryOverwrite();
        
        static public bool TryParseFromExtension(string input, out MIMEType type)
        {
            if(EXTENSION_LOOKUP_TABLE.TryGetValue(input.ToLower(), out type))
                return true;
                
            type = ApplicationOctetStream;
            return false;
        }
        static public MIMEType ParseFromExtension(string input)
        {
            MIMEType type;
            
            TryParseFromExtension(input, out type);
            return type;
        }
        
        static public bool TryParseFromFilename(string input, out MIMEType type)
        {
            return TryParseFromExtension(Filename.GetExtension(input), out type);
        }
        static public MIMEType ParseFromFilename(string input)
        {
            MIMEType type;
            
            TryParseFromFilename(input, out type);
            return type;
        }
        
        private MIMEType(MIMEGeneralType g, string v, IEnumerable<string> e)
        {
            general_type = g;
            sub_value = v;
            
            extensions = e.ToList();
        }
        
        public MIMEGeneralType GetGeneralType()
        {
            return general_type;
        }
        
        public IEnumerable<string> GetExtensions()
        {
            return extensions;
        }
        
        public override string ToString()
        {
            return general_type + "/" + sub_value;
        }
    }
}
<#+
public class MIMETypeInfo
{
    public readonly string type;
    public readonly string general_type;
    public readonly string sub_type;
    
    public readonly List<string> extensions;
    
    public MIMETypeInfo(string v, IEnumerable<string> e)
    {
        type = v;
        general_type = v.TruncateBefore("/");
        sub_type = v.OffsetAfter("/");
        
        extensions = e.ToList();
    }
}
#>