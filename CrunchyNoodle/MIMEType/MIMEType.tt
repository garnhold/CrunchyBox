<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)/CrunchyDough/bin/Release/CrunchyDough.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Crunchy.Dough" #>
<#@ output extension=".cs" #>
<#
string file_text = Files.GetStreamSystem().ReadText(Host.ResolvePath("mime_types.txt"));

List<KeyValuePair<string, string>> pairs = file_text
	.GetLines()
    .Skip(s => s.StartsWith("#"))
	.Skip(s => s.IsBlank())
	.Convert(l => l.RegexMatch("(\\S+)\\s+(.*)"))
	.Convert(m => 
		m.Groups[2].Value.SplitOn(" ")
			.Convert(e => new KeyValuePair<string, string>(e, m.Groups[1].Value))
	)
	.ToList();

List<string> values = pairs
	.Convert(p => "KeyValuePair.New(\"" + p.Key + "\", \"" + p.Value + "\")")
	.ToList();
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Crunchy.Noodle
{
    using Dough;
    
    static public class MIMEType
	{
		static private OperationCache<OptionTable<string>> MIME_TYPE_DICTIONARY = ReflectionCache.Get().NewOperationCache("MIME_TYPE_DICTIONARY", delegate(){
			return new OptionTable<string>(
<#=values.Join(",\n")#>
			);
		});
		static public string GetMIMETypeFromExtension(string extension)
		{
			return MIME_TYPE_DICTIONARY.Fetch().Lookup(extension, "application/octet-stream");
		}

		static public string GetMIMETypeFromFilename(string filename)
		{
			return GetMIMETypeFromExtension(Filename.GetExtension(filename));
		}
	}
}