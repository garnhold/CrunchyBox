<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
NumericInfo[] types = new NumericInfo[]{
	new NumericInfo("byte", "Byte"),
	new NumericInfo("short", "Short"),
	new NumericInfo("int", "Int"),
	new NumericInfo("long", "Long"),
	new NumericInfo("float", "Float"),
	new NumericInfo("double", "Double"),
	new NumericInfo("decimal", "Decimal")
};
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace CrunchyDough
{
<# foreach(NumericInfo type in types){#>	
	[Serializable]
    public struct <#=type.class_name#>Range
	{
		public readonly <#=type.type_name#> x1;
		public readonly <#=type.type_name#> x2;

		static public implicit operator <#=type.class_name#>Variance(<#=type.class_name#>Range r)
		{
			return r.GetVariance();
		}

		public <#=type.class_name#>Range(<#=type.type_name#> nx1, <#=type.type_name#> nx2)
		{
			x1 = nx1;
			x2 = nx2;
		}

		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;

				hash = hash * 23 + x1.GetHashCode();
				hash = hash * 23 + x2.GetHashCode();
				return hash;
			}
		}

		public override bool Equals(object obj)
		{
			<#=type.class_name#>Range cast;

			if(obj.Convert<<#=type.class_name#>Range>(out cast))
			{
				if(cast.x1 == x1)
				{
					if(cast.x2 == x2)
						return true;
				}
			}

			return false;
		}

		public override string ToString()
		{
			return "[" + x1 + ", " + x2 + "]";
		}
	}

	[Serializable]
    public struct <#=type.class_name#>Variance
	{
		public readonly <#=type.type_name#> value;
		public readonly <#=type.type_name#> radius;

		static public implicit operator <#=type.class_name#>Range(<#=type.class_name#>Variance v)
		{
			return v.GetRange();
		}

		public <#=type.class_name#>Variance(<#=type.type_name#> v, <#=type.type_name#> r)
		{
			value = v;
			radius = r;
		}

		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;

				hash = hash * 23 + value.GetHashCode();
				hash = hash * 23 + radius.GetHashCode();
				return hash;
			}
		}

		public override bool Equals(object obj)
		{
			<#=type.class_name#>Variance cast;

			if(obj.Convert<<#=type.class_name#>Variance>(out cast))
			{
				if(cast.value == value)
				{
					if(cast.radius == radius)
						return true;
				}
			}

			return false;
		}

		public override string ToString()
		{
			return value + "\u00B1" + radius;
		}
	}

	static public class <#=type.class_name#>RangeVarianceExtensions
	{
		static public <#=type.type_name#> GetCenter(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)((item.x1 + item.x2) / 2);
		}
		static public <#=type.type_name#> GetRadius(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)(item.GetWidth() / 2);
		}

		static public <#=type.type_name#> GetBoundA(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.value - item.radius);
		}
		static public <#=type.type_name#> GetBoundB(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.value + item.radius);
		}

		static public <#=type.type_name#> GetWidth(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)(item.x2 - item.x1);
		}
		static public <#=type.type_name#> GetWidth(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.radius * 2);
		}

		static public <#=type.class_name#>Variance GetVariance(this <#=type.class_name#>Range item)
		{
			return new <#=type.class_name#>Variance(item.GetCenter(), item.GetRadius());
		}
		static public <#=type.class_name#>Range GetRange(this <#=type.class_name#>Variance item)
		{
			return new <#=type.class_name#>Range(item.GetBoundA(), item.GetBoundB());
		}
	}

<# } #>
}

<#+
public class NumericInfo
{
	public readonly string type_name;
	public readonly string class_name;

	public NumericInfo(string t, string c)
	{
		type_name = t;
		class_name = c;
	}
}
#>