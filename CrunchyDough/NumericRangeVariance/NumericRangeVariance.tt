<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
NumericInfo byte_info = new NumericInfo("byte", "Byte");
NumericInfo short_info = new NumericInfo("short", "Short");
NumericInfo int_info = new NumericInfo("int", "Int");
NumericInfo long_info = new NumericInfo("long", "Long");
NumericInfo float_info = new NumericInfo("float", "Float");
NumericInfo double_info = new NumericInfo("double", "Double");
NumericInfo decimal_info = new NumericInfo("decimal", "Decimal");

byte_info.implicit_destinations = new NumericInfo[]{ short_info, int_info, long_info, float_info, double_info, decimal_info };

short_info.implicit_destinations = new NumericInfo[]{ int_info, long_info, float_info, double_info, decimal_info };
short_info.explicit_destinations = new NumericInfo[]{ byte_info };

int_info.implicit_destinations = new NumericInfo[]{ long_info, float_info, double_info, decimal_info };
int_info.explicit_destinations = new NumericInfo[] { short_info, byte_info };

long_info.implicit_destinations = new NumericInfo[]{ float_info, double_info, decimal_info };
long_info.explicit_destinations = new NumericInfo[] { int_info, short_info, byte_info };

float_info.implicit_destinations = new NumericInfo[]{ double_info };
float_info.explicit_destinations = new NumericInfo[] { decimal_info, long_info, int_info, short_info, byte_info };

double_info.explicit_destinations = new NumericInfo[] { decimal_info, float_info, long_info, int_info, short_info, byte_info };

NumericInfo[] types = new NumericInfo[]{ byte_info, short_info, int_info, long_info, float_info, double_info, decimal_info };
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Crunchy.Dough
{
<#foreach(NumericInfo type in types){#>
	[Serializable]
    public struct <#=type.class_name#>Range
	{
		public readonly <#=type.type_name#> x1;
		public readonly <#=type.type_name#> x2;

		static public implicit operator <#=type.class_name#>Variance(<#=type.class_name#>Range r)
		{
			return r.GetVariance();
		}

	<# foreach(NumericInfo to_type in type.implicit_destinations){#>

		static public implicit operator <#=to_type.class_name#>Range(<#=type.class_name#>Range r)
		{
			return new <#=to_type.class_name#>Range(r.x1, r.x2);
		}
	<#}#>

	<#foreach(NumericInfo to_type in type.explicit_destinations){#>

		static public explicit operator <#=to_type.class_name#>Range(<#=type.class_name#>Range r)
		{
			return new <#=to_type.class_name#>Range((<#=to_type.type_name#>)r.x1, (<#=to_type.type_name#>)r.x2);
		}
	<#}#>

		public <#=type.class_name#>Range(<#=type.type_name#> nx1, <#=type.type_name#> nx2)
		{
			x1 = nx1;
			x2 = nx2;
		}

		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;

				hash = hash * 23 + x1.GetHashCode();
				hash = hash * 23 + x2.GetHashCode();
				return hash;
			}
		}

		public override bool Equals(object obj)
		{
			<#=type.class_name#>Range cast;

			if(obj.Convert<<#=type.class_name#>Range>(out cast))
			{
				if(cast.x1 == x1)
				{
					if(cast.x2 == x2)
						return true;
				}
			}

			return false;
		}

		public override string ToString()
		{
			return "[" + x1 + ", " + x2 + "]";
		}
	}

	[Serializable]
    public struct <#=type.class_name#>Variance
	{
		public readonly <#=type.type_name#> value;
		public readonly <#=type.type_name#> radius;

		static public implicit operator <#=type.class_name#>Range(<#=type.class_name#>Variance v)
		{
			return v.GetRange();
		}

	<# foreach(NumericInfo to_type in type.implicit_destinations){#>

		static public implicit operator <#=to_type.class_name#>Variance(<#=type.class_name#>Variance r)
		{
			return new <#=to_type.class_name#>Variance(r.value, r.radius);
		}
	<#}#>

	<#foreach(NumericInfo to_type in type.explicit_destinations){#>

		static public explicit operator <#=to_type.class_name#>Variance(<#=type.class_name#>Variance r)
		{
			return new <#=to_type.class_name#>Variance((<#=to_type.type_name#>)r.value, (<#=to_type.type_name#>)r.radius);
		}
	<#}#>

		public <#=type.class_name#>Variance(<#=type.type_name#> v, <#=type.type_name#> r)
		{
			value = v;
			radius = r;
		}

		public override int GetHashCode()
		{
			unchecked
			{
				int hash = 17;

				hash = hash * 23 + value.GetHashCode();
				hash = hash * 23 + radius.GetHashCode();
				return hash;
			}
		}

		public override bool Equals(object obj)
		{
			<#=type.class_name#>Variance cast;

			if(obj.Convert<<#=type.class_name#>Variance>(out cast))
			{
				if(cast.value == value)
				{
					if(cast.radius == radius)
						return true;
				}
			}

			return false;
		}

		public override string ToString()
		{
			return value + "\u00B1" + radius;
		}
	}

	static public class <#=type.class_name#>RangeVarianceExtensions
	{
		static public <#=type.type_name#> GetCenter(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)((item.x1 + item.x2) / 2);
		}
		static public <#=type.type_name#> GetRadius(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)(item.GetWidth() / 2);
		}

		static public <#=type.type_name#> GetBoundA(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.value - item.radius);
		}
		static public <#=type.type_name#> GetBoundB(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.value + item.radius);
		}

		static public <#=type.type_name#> GetWidth(this <#=type.class_name#>Range item)
		{
			return (<#=type.type_name#>)(item.x2 - item.x1);
		}
		static public <#=type.type_name#> GetWidth(this <#=type.class_name#>Variance item)
		{
			return (<#=type.type_name#>)(item.radius * 2);
		}

		static public <#=type.class_name#>Variance GetVariance(this <#=type.class_name#>Range item)
		{
			return new <#=type.class_name#>Variance(item.GetCenter(), item.GetRadius());
		}
		static public <#=type.class_name#>Range GetRange(this <#=type.class_name#>Variance item)
		{
			return new <#=type.class_name#>Range(item.GetBoundA(), item.GetBoundB());
		}
        
        static public <#=type.class_name#>Range GetExpanded(this <#=type.class_name#>Range item, <#=type.type_name#> value)
        {
            return new <#=type.class_name#>Range(
                item.x1.Min(value),
                item.x2.Max(value)
            );
        }
        static public <#=type.class_name#>Variance GetExpanded(this <#=type.class_name#>Variance item, <#=type.type_name#> value)
        {
            return new <#=type.class_name#>Variance(
                item.value,
                item.radius.Max((<#=type.type_name#>)((item.value - value).GetAbs()))
            );
        }
	}

<# } #>
}

<#+
public class NumericInfo
{
	public readonly string type_name;
	public readonly string class_name;

	public NumericInfo[] implicit_destinations;
	public NumericInfo[] explicit_destinations;

	public NumericInfo(string t, string c)
	{
		type_name = t;
		class_name = c;

		implicit_destinations = new NumericInfo[0];
		explicit_destinations = new NumericInfo[0];
	}
}
#>