<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
NumericInfo[] infos = new NumericInfo[]{
    new NumericInfo("byte", "Byte", byte.MinValue, byte.MaxValue),
    new NumericInfo("sbyte", "SignedByte", sbyte.MinValue, sbyte.MaxValue),
    new NumericInfo("short", "Short", short.MinValue, short.MaxValue),
    new NumericInfo("ushort", "UnsignedShort", ushort.MinValue, ushort.MaxValue),
    new NumericInfo("int", "Int", int.MinValue, int.MaxValue),
    new NumericInfo("uint", "UnsignedInt", uint.MinValue, uint.MaxValue),
    new NumericInfo("long", "Long", long.MinValue, long.MaxValue),
    new NumericInfo("ulong", "UnsignedLong", ulong.MinValue, ulong.MaxValue)
};
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Crunchy.Dough
{
	static public class NumberFitExtensions
    {
        <#for(int i = 0; i < infos.Length; i++){#>
            <#NumericInfo src_info = infos[i];#>

    		static public object ShrinkFit(this <#=src_info.type_name#> item)
    		{
                <#for(int j = 0; j < i; j++){#>
                    <#NumericInfo dst_info = infos[j];#>
                
        			if(item.CanFitIn<#=dst_info.class_name#>())
        				return (<#=dst_info.type_name#>)item;

                <#}#>
    			return item;
    		}

            <#for(int j = 0; j < infos.Length; j++){#><#if(j != i){#>
                <#NumericInfo dst_info = infos[j];#>
                
        		static public bool CanFitIn<#=dst_info.class_name#>(this <#=src_info.type_name#> item)
        		{
                    <#if(src_info.minimum < dst_info.minimum){#>
                        if(item < <#=dst_info.minimum#>)
                            return false;
                    <#}#>
                    
                    <#if(src_info.maximum > dst_info.maximum){#>
                        if(item > <#=dst_info.maximum#>)
                            return false;
                    <#}#>

        			return true;
        		}
                
                static public <#=dst_info.type_name#> FitInCapped<#=dst_info.class_name#>(this <#=src_info.type_name#> item)
                {
                    <#if(src_info.minimum < dst_info.minimum){#>
                        if(item < <#=dst_info.minimum#>)
                            return <#=dst_info.minimum#>;
                    <#}#>
                    
                    <#if(src_info.maximum > dst_info.maximum){#>
                        if(item > <#=dst_info.maximum#>)
                            return <#=dst_info.maximum#>;
                    <#}#>
                        
                    return (<#=dst_info.type_name#>)item;
                }

            <#}#><#}#>
        <#}#>
	}
}
<#+
public class NumericInfo
{
	public readonly string type_name;
	public readonly string class_name;

	public readonly decimal minimum;
	public readonly decimal maximum;

	public NumericInfo(string t, string c, decimal min, decimal max)
	{
		type_name = t;
		class_name = c;

		minimum = min;
		maximum = max;
	}
}
#>