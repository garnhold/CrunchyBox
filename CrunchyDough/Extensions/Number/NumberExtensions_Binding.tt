<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
NumericInfo[] infos = new NumericInfo[]{
	new NumericInfo("byte", "ByteRange"),
	new NumericInfo("short", "ShortRange"),
	new NumericInfo("int", "IntRange"),
	new NumericInfo("long", "LongRange"),
	new NumericInfo("float", "FloatRange"),
	new NumericInfo("double", "DoubleRange"),
	new NumericInfo("decimal", "DecimalRange")
};
#>
using System;
using System.Collections;
using System.Collections.Generic;

namespace CrunchyDough
{
	static public class NumberExtensions_Binding
    {
<# foreach(NumericInfo info in infos){#>
		static public <#=info.type_name#> BindAbove(this <#=info.type_name#> item, <#=info.type_name#> lower)
        {
            if (item > lower)
                return item;

            return lower;
        }
		static public bool IsBoundAbove(this <#=info.type_name#> item, <#=info.type_name#> lower)
		{
			if (item >= lower)
				return true;

			return false;
		}

        static public <#=info.type_name#> BindBelow(this <#=info.type_name#> item, <#=info.type_name#> upper)
        {
            if (item < upper)
                return item;

            return upper;
        }
		static public bool IsBoundBelow(this <#=info.type_name#> item, <#=info.type_name#> upper)
		{
			if (item <= upper)
				return true;

			return false;
		}

        static public <#=info.type_name#> BindBetween(this <#=info.type_name#> item, <#=info.type_name#> value1, <#=info.type_name#> value2)
        {
            <#=info.type_name#> lower;
            <#=info.type_name#> upper;

            value1.Order(value2, out lower, out upper);

            if (item > lower)
            {
                if (item < upper)
                    return item;

                return upper;
            }

            return lower;
        }
		static public <#=info.type_name#> BindBetween(this <#=info.type_name#> item, <#=info.range_name#> range)
		{
			return item.BindBetween(range.x1, range.x2);
		}

		static public bool IsBoundBetween(this <#=info.type_name#> item, <#=info.type_name#> value1, <#=info.type_name#> value2)
		{
			<#=info.type_name#> low;
            <#=info.type_name#> high;

            value1.Order(value2, out low, out high);

            if (item.IsBoundAbove(low) && item.IsBoundBelow(high))
                return true;

            return false;
		}
		static public bool IsBoundBetween(this <#=info.type_name#> item, <#=info.range_name#> range)
		{
			return item.IsBoundBetween(range.x1, range.x2);
		}
<# } #>
	}
}
<#+
public class NumericInfo
{
	public readonly string type_name;
	public readonly string range_name;

	public NumericInfo(string t, string r)
	{
		type_name = t;
		range_name = r;
	}
}
#>